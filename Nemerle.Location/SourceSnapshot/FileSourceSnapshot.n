using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler
{
  public partial module FileUtils
  {
    private sealed class FileSourceSnapshot : SourceSnapshot
    {
      public this(file : File, version : int, isGenerated : bool)
      {
        def originalText = IO.File.ReadAllText(file.FullName);
        base(textOffset=0, hashCode=originalText.GetHashCode());
        OriginalText = originalText;
        File         = file;
        OriginalText = IO.File.ReadAllText(file.FullName);
        IsGenerated  = isGenerated;
        Version      = version;
      }
    
      public override File         : File   { get; }
      public override OriginalText : string { get; }
      public override Text         : string { get OriginalText }
      public override Version      : int    { get; }
      public override IsFake       : bool   { get false }
      public override IsGenerated  : bool   { get; }

      public override Reload() : SourceSnapshot
      {
        def newSource = FileSourceSnapshot(this.File, isGenerated=IsGenerated, version=Version + 1);
        def index = this.File.Id;
        _sourceSnapshots[index] = newSource;
        newSource
      }
    }
  }
}