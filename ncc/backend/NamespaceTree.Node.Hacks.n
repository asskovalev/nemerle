using System;
using System.Diagnostics;
using Nemerle.Collections;
using Nemerle.Utility;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  public partial class NamespaceTree
  {
    public partial class Node
    {
      private static TryNameHack(name : string, cur_node : Node) : TypeInfoCache
      {
        match (name[name.Length - 1])
        {
          //| '*' | '&' =>
          //  def bare_name = name.TrimEnd(array['*', '&']);
          //  def (systemType, lib) =
          //    match (cur_node.children.Get(bare_name))
          //    {
          //      | Some(nd) =>
          //        match (nd.Value)
          //        {
          //          | TypeInfoCache.Cached(tc)   => (SystemHelpers.GetSystemType(tc), tc.GetLibraryReference())
          //          | TypeInfoCache.NotLoaded(e) => (e.SystemType, e.library)
          //          | _                          => (null, null)
          //        }
          //      | _ => (null, null)
          //    };
          //  if (systemType != null)
          //  {
          //    def correct_name = systemType.TypeFullName() + name.Substring(bare_name.Length);
          //    def nst          = systemType.Assembly.GetType(correct_name);
          //    assert(nst != null);
          //    def node         = cur_node.Child(name);
          //    def res          = TypeInfoCache.Cached(lib.ConstructTypeInfo(nst, node));
          //    node.Value       = res;
          //    res
          //  }
          //  else
          //    TypeInfoCache.No()

          | _ => TypeInfoCache.No()
        }
      }

      internal LoadValue(val : TypeInfoCache.NotLoadedList) : list[TypeInfo]
      {
        def by_parms_amount = Hashtable();
        def cached = val.elems.FoldLeft([], fun (e, acc)
        {
          // eliminate ambiguous types, store only those differing
          // on amount of generic parameters
          def count = e.SystemType.GenericParameters.Count;
          if (by_parms_amount.Contains (count))
          {
            def used = by_parms_amount[count] : DN.TypeDef;
            Message.Warning($"using type `[$(used.DefinitionAssembly)]$(used.ReflectionFullName)' that was defined in more than one assembly: "
                             " `[$(e.SystemType.DefinitionAssembly)]$(e.SystemType.ReflectionFullName)' (the first version was used)");
            acc
          }
          else {
            by_parms_amount.Add(count, e.SystemType);

            e.ConstructTypeInfo(this, false);
            e.tycon :: acc
          }
        });
        Value = TypeInfoCache.CachedAmbiguous(cached);
        cached
      }
    } // class Node

    public LookupSystemTypeOpt(split : list[string]) : option[DN.TypeDef]
    {
      match (namespace_tree.TryPath(split))
      {
        | TypeInfoCache.Cached(tc)          => Some(SystemHelpers.GetSystemType(tc))
        | TypeInfoCache.NotLoaded(e)        => Some(e.SystemType)
        | NotLoadedList(ts)                 => Some(ts.Head.SystemType)
        | CachedAmbiguous(ts)               => Some(SystemHelpers.GetSystemType(ts.Head))
        | TypeInfoCache.MacroCall
        | TypeInfoCache.No
        | TypeInfoCache.NamespaceReference  => None()
      }
    }
  } // class NamespaceTree
} // ns
