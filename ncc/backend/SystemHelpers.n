using Nemerle.IO;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using System.Linq;

using DN = dnlib.DotNet;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public module SystemHelpers
  {
    internal ToGenericResolver(this tenv : Map [string, StaticTypeVar]) : DN.GenericParam -> FixedType
    {
      fun (param)
      {
        if (tenv?.Find(param.FullName) is Some(tv))
          FixedType.StaticTypeVarRef(tv)
        else
          Util.ice($"Type parameter $(param) from $(param.DeclaringType)")
      }
    }

    internal IsDefined(this attributeOwner : DN.IHasCustomAttribute, attribute : TypeInfo) : bool
    {
      foreach (a in attributeOwner.CustomAttributes)
        when (a.TypeFullName == attribute.FullName)
          return true;
      false
    }
    
    internal GetObsoletionDetails(this attributeOwner : DN.IHasCustomAttribute) : string * bool
    {
      mutable message : string;
      mutable isError;
      foreach (a in attributeOwner.CustomAttributes)
      {
        when (a.TypeFullName == "System.ObsoleteAttribute" && a.ConstructorArguments.Count <= 2)
        {
          when (a.ConstructorArguments.Count > 0)
            message = a.ConstructorArguments[0].Value :> DN.UTF8String;
          when (a.ConstructorArguments.Count > 1)
            isError = a.ConstructorArguments[1].Value :> bool;
        }
      }
      (message, isError)
    }

    internal GetConditions(this attributeOwner : DN.IHasCustomAttribute) : list[string]
    {
      mutable conditions = [];
      foreach (a in attributeOwner.CustomAttributes)
        when (a.TypeFullName == "System.Diagnostics.ConditionalAttribute" && a.ConstructorArguments.Count == 1)
          conditions ::= (a.ConstructorArguments[0].Value :> DN.UTF8String) : string;
      conditions
    }

    internal GetSystemMemberInfo(member : IMember) : DN.IMemberDef
    {
      (member :> IBackendMember).GetHandle()
    }

    public ToMethodRef(this method : IMethod) : DN.IMethodDefOrRef
    {
      match (method)
      {
        | x is IBackendMethod => x.MethodRef
        | _ => assert(false)
      }
    }

    public ToTypeRef(this type : TypeInfo) : DN.ITypeDefOrRef
    {
      | x is IBackendType => x.TypeRef
      | _ => assert(false)
    }

    public ToTypeSig(this type : TExpr) : DN.TypeSig
    {
      ToBackendType(type.Type.Fix()).TypeSig
    }

    public ToTypeSig(this type : TypeVar) : DN.TypeSig
    {
      ToBackendType(type.Fix()).TypeSig
    }

    public ToBackendType(this type : FixedType, voidTypeSig : TypeInfo = null) : IBackendType
    {
      match (type)
      {
        | Void                   => (voidTypeSig ?? type.InternalType.Void_tc) :> IBackendType
        | Tuple                  => ToBackendType(TupleType.Make(type))
        | Fun                    => ToBackendType(FunctionType.Make(type))
        | StaticTypeVarRef(tv)   => tv
        | Class(ti, [])          => ti :> IBackendType
        | Class(ti, _ :: _) as t => (ti :> IBackendType).MakeGenericType(t)
        | Ref(t) | Out(t)        => type.SystemTypeCache.GetByRefTypeSpec(ToBackendType(t.Fix()).TypeSig)
        | Array(et, rank)        =>
          def elementType = et.Fix();
          when (elementType is FixedType.Void)
            Message.FatalError("array element type cannot be void");

          type.SystemTypeCache.GetArrayTypeSpec(ToTypeSig(elementType), rank)

        | Intersection(types)    => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }
  }
} // end ns
