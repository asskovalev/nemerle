using Nemerle.IO;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using System.Linq;

using DN = dnlib.DotNet;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public module SystemHelpers
  {
    internal ToGenericResolver(this tenv : Map [string, StaticTypeVar]) : DN.GenericParam -> FixedType
    {
      fun (param)
      {
        if (tenv?.Find(param.FullName) is Some(tv))
          FixedType.StaticTypeVarRef(tv)
        else
          Util.ice($"Type parameter $(param) from $(param.DeclaringType)")
      }
    }

    internal GetMethod(this type : DN.TypeDef, name : string, params argumentTypes : array[DN.TypeDef]) : DN.MethodDef
    {
      foreach (method when method.Name == name in type.Methods)
      {
        def parameters = method.Parameters;
        def firstIndex = parameters.MethodSigIndexBase;
        when (parameters.Count - firstIndex == argumentTypes.Length)
        {
          def comparer = DN.TypeEqualityComparer.Instance;
          mutable isMatched = true;
          for (mutable index; isMatched && index < argumentTypes.Length; ++index)
            isMatched &= comparer.Equals(parameters[index + firstIndex].Type, argumentTypes[index]);
          when (isMatched)
          return method;
        }
      }

      Util.ice($"Cannot find method $name(..$argumentTypes) in $type");
    }

    internal IsDefined(this attributeOwner : DN.IHasCustomAttribute, attribute : TypeInfo) : bool
    {
      def attributeType = GetSystemType(attribute);
      foreach (a in attributeOwner.CustomAttributes)
        when (DN.TypeEqualityComparer.Instance.Equals(attributeType, a.AttributeType))
          return true;
      false
    }
    
    internal GetObsoletionDetails(this attributeOwner : DN.IHasCustomAttribute) : string * bool
    {
      mutable message : string;
      mutable isError;
      foreach (a in attributeOwner.CustomAttributes)
      {
        when (a.TypeFullName == "System.ObsoleteAttribute" && a.ConstructorArguments.Count <= 2)
        {
          when (a.ConstructorArguments.Count > 0)
            message = a.ConstructorArguments[0].Value :> DN.UTF8String;
          when (a.ConstructorArguments.Count > 1)
            isError = a.ConstructorArguments[1].Value :> bool;
        }
      }
      (message, isError)
    }

    internal GetConditions(this attributeOwner : DN.IHasCustomAttribute) : list[string]
    {
      mutable conditions = [];
      foreach (a in attributeOwner.CustomAttributes)
        when (a.TypeFullName == "System.Diagnostics.ConditionalAttribute" && a.ConstructorArguments.Count == 1)
          conditions ::= (a.ConstructorArguments[0].Value :> DN.UTF8String) : string;
      conditions
    }

    internal GetTypeDefOrRefSig(this typeInfo : TypeInfo) : DN.TypeDefOrRefSig
    {
      match (typeInfo)
      {
        | x is IBackendType => x.TypeDefOrRefSig
        | _ => assert(false)
      }
    }
    
    internal GetTypeSpec(this typeInfo : TypeInfo, specialization : FixedType.Class) : DN.TypeSpec
    {
      match (typeInfo)
      {
        | x is IBackendType => x.GetTypeSpec(specialization)
        | _ => assert(false)
      }
    }

    internal GetSystemType(typeInfo : TypeInfo) : DN.TypeDef
    {
      match (typeInfo)
      {
        | x is IBackendType => x.SystemType
        | _ => assert(false)
      }
    }

    internal GetSystemMemberInfo(member : IMember) : DN.IMemberDef
    {
      (member :> IBackendMember).GetHandle()
    }

    public ToMethodRef(this method : IMethod) : DN.IMethodDefOrRef
    {
      match (method)
      {
        | x is IBackendMethod => x.MethodRef
        | _ => assert(false)
      }
    }

    public ToTypeSig(this type : TExpr) : DN.TypeSig
    {
      ToTypeSig(type.Type)
    }

    public ToTypeSig(this type : TypeVar) : DN.TypeSig
    {
      ToTypeSig(type.Fix())
    }

    public ToTypeSig(this type : FixedType, voidTypeSig : DN.TypeSig = null) : DN.TypeSig
    {
      match (type)
      {
        | Void                  => voidTypeSig ?? type.InternalType.Void_tc.GetTypeDefOrRefSig()
        | Tuple                 => ToTypeSig(TupleType.Make(type))
        | Fun                   => ToTypeSig(FunctionType.Make(type))
        | StaticTypeVarRef(tv)  => tv.GenericSig
        | Class(ti, [])         => ti.GetTypeDefOrRefSig()
        | Class(ti, _ :: _) as t => ti.GetTypeSpec(t).TypeSig
        | Ref(t) | Out(t)      => DN.ByRefSig(ToTypeSig(t.Fix()))
        | Array(et, rank)      =>
          def elementType = et.Fix();
          when (elementType is FixedType.Void)
            Message.FatalError("array element type cannot be void");

          type.SystemTypeCache.GetArrayTypeCache(ToTypeSig(elementType), rank).TypeSig

        | Intersection(types)   => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }
  }
} // end ns
