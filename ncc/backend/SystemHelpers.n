using Nemerle.IO;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using System.Linq;

using DN = dnlib.DotNet;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public module SystemHelpers
  {
    internal ToGenericResolver(this tenv : Map [string, StaticTypeVar]) : DN.GenericParam -> FixedType
    {
      fun (param)
      {
        if (tenv?.Find(param.FullName) is Some(tv))
          FixedType.StaticTypeVarRef(tv)
        else
          Util.ice($"Type parameter $(param) from $(param.DeclaringType)")
      }
    }

    internal GetMethod(this type : DN.TypeDef, name : string, params argumentTypes : array[DN.TypeDef]) : DN.MethodDef
    {
      foreach (method when method.Name == name in type.Methods)
      {
        def parameters = method.Parameters;
        def firstIndex = parameters.MethodSigIndexBase;
        when (parameters.Count - firstIndex == argumentTypes.Length)
        {
          def comparer = DN.TypeEqualityComparer.Instance;
          mutable isMatched = true;
          for (mutable index; isMatched && index < argumentTypes.Length; ++index)
            isMatched &= comparer.Equals(parameters[index + firstIndex].Type, argumentTypes[index]);
          when (isMatched)
          return method;
        }
      }

      Util.ice($"Cannot find method $name(..$argumentTypes) in $type");
    }

    internal IsDefined(this attributeOwner : DN.IHasCustomAttribute, attribute : DN.ITypeDefOrRef) : bool
    {
      foreach (a in attributeOwner.CustomAttributes)
        when (DN.TypeEqualityComparer.Instance.Equals(attribute, a.AttributeType))
          return true;
      false
    }
    
    internal GetObsoletionDetails(this attributeOwner : DN.IHasCustomAttribute) : string * bool
    {
      mutable message : string;
      mutable isError;
      foreach (a in attributeOwner.CustomAttributes)
      {
        when (a.TypeFullName == "System.ObsoleteAttribute" && a.ConstructorArguments.Count <= 2)
        {
          when (a.ConstructorArguments.Count > 0)
            message = a.ConstructorArguments[0].Value :> DN.UTF8String;
          when (a.ConstructorArguments.Count > 1)
            isError = a.ConstructorArguments[1].Value :> bool;
        }
      }
      (message, isError)
    }

    internal GetConditions(this attributeOwner : DN.IHasCustomAttribute) : list[string]
    {
      mutable conditions = [];
      foreach (a in attributeOwner.CustomAttributes)
        when (a.TypeFullName == "System.Diagnostics.ConditionalAttribute" && a.ConstructorArguments.Count == 1)
          conditions ::= (a.ConstructorArguments[0].Value :> DN.UTF8String) : string;
      conditions
    }

    internal GetClassOrValueTypeSig(this typeInfo : TypeInfo) : DN.ClassOrValueTypeSig
    {
      match (typeInfo)
      {
        | x is IBackendType => x.ClassOrValueTypeSig
        | _ => assert(false)
      }
    }

    internal GetSystemType(typeInfo : TypeInfo) : DN.TypeDef
    {
      match (typeInfo)
      {
        | x is IBackendType => x.SystemType
        | _ => assert(false)
      }
    }

    internal GetSystemMemberInfo(member : IMember) : DN.IMemberDef
    {
      (member :> IBackendMember).GetHandle()
    }
    
    public ToNonVoidTypeSig(type : TypeVar, systemTypeCache : DN.ICorLibTypes) : DN.TypeSig
    {
      match (type)
      {
        | FixedType.Void => systemTypeCache.Object
        | _ => ToTypeSig(type.Fix(), systemTypeCache)
      }
    }

    public ToTypeSig(this type : TExpr) : DN.TypeSig
    {
      ToTypeSig(type.Type)
    }

    public ToTypeSig(this type : TypeVar) : DN.TypeSig
    {
      ToTypeSig(type.Fix())
    }
    
    public ToTypeSig(this type : FixedType) : DN.TypeSig
    {
      ToTypeSig(type, ManagerClass.Instance.Hierarchy._module_builder.CorLibTypes)
    }
    
    public ToTypeSig(type : FixedType, systemTypeCache : DN.ICorLibTypes) : DN.TypeSig
    {
      match (type)
      {
        | Void                  => systemTypeCache.Void
        | Tuple                 => ToTypeSig(TupleType.Make(type), systemTypeCache)
        | Fun                   => ToTypeSig(FunctionType.Make(type), systemTypeCache)
        | StaticTypeVarRef(tv)  => tv.GenericSig
        | Class(ti, [])         => ti.GetClassOrValueTypeSig()
        | Class(ti, args)       =>
          def     tconstructor = ti.GetClassOrValueTypeSig();
          def     typedargs    = array(args.Length);
          mutable idx          = 0;
          mutable formals      = ti.TypePparms;
          def     errorCount   = Message.ErrorCount;

          foreach (arg in args)
          {
            match (formals)
            {
              | f :: fs =>
                formals = fs;
                f.CheckConstraints(arg, type);

              | [] => Util.ice()
            }

            typedargs[idx] = ToTypeSig(arg.Fix(), systemTypeCache);
            ++idx;
          }

          if (errorCount == Message.ErrorCount)
            DN.GenericInstSig(tconstructor, typedargs);
          else
            systemTypeCache.Object

        | Ref(t) | Out(t)      => DN.ByRefSig(ToTypeSig(t.Fix(), systemTypeCache))
        | Array(et, rank)      =>
          def elementType = et.Fix();
          when (elementType is FixedType.Void)
            Message.FatalError("array element type cannot be void");
          if (rank == 1)
            DN.SZArraySig(ToTypeSig(elementType, systemTypeCache))
          else
            DN.ArraySig(ToTypeSig(elementType, systemTypeCache), rank)

        | Intersection(types)   => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }
  }
} // end ns
