using Nemerle.IO;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;

using SR  = System.Reflection;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public module SystemHelpers
  {
    internal GetSystemType(typeInfo : TypeInfo) : System.Type
    {
      match (typeInfo)
      {
        | x is LibraryReference.ExternalTypeInfo => x.SystemType
        | x is ITypeBuilder                      => x.SystemType
        | _ => assert(false)
      }
    }

    internal GetSystemMemberInfo(member : IMember) : SR.MemberInfo
    {
      (member :> IBackendMember).GetHandle()
    }
    
    public GetNonVoidSystemType(type : TypeVar, systemObjectType : System.Type) : System.Type
    {
      match (type)
      {
        | FixedType.Void => systemObjectType
        | _ => GetSystemType(type)
      }
    }

    public GetSystemType(type : TypeVar) : System.Type
    {
      GetSystemType(type.Fix())
    }
    
    public GetSystemType(type : FixedType) : System.Type
    {
      GetSystemType(type, ManagerClass.Instance.SystemTypeCache)
    }
    
    public GetSystemType(type : FixedType, systemTypeCache : SystemTypeClass) : System.Type
    {
      match (type)
      {
        | Void                  => systemTypeCache.Void
        | Tuple                 => GetSystemType(TupleType.Make(type), systemTypeCache)
        | Fun                   => GetSystemType(FunctionType.Make(type), systemTypeCache)
        | StaticTypeVarRef(tv)  => tv.GetSystemType()
        | Class(ti, [])         => GetSystemType(ti);
        | Class(ti, args)       =>
          def     tconstructor = GetSystemType(ti);
          def     typedargs    = array (args.Length);
          mutable idx          = 0;
          mutable formals      = ti.Typarms;
          def     errorCount   = Message.ErrorCount;

          foreach (arg in args)
          {
            match (formals)
            {
              | f :: fs =>
                formals = fs;
                f.CheckConstraints (arg, type);

              | [] => Util.ice ()
            }

            typedargs[idx] = GetSystemType(arg);
            ++idx;
          }

          if (errorCount == Message.ErrorCount)
            tconstructor.GetGenericTypeDefinition ().MakeGenericType (typedargs)
          else
            systemTypeCache.Object

        | Ref(t) | Out(t)       => GetSystemType(t).MakeByRefType()
        | Array (et, rank)      =>
          def et_SystemType = GetSystemType(et);
          when (et_SystemType.Equals (systemTypeCache.Void))
            Message.FatalError ("array element type cannot be void");
          if (rank == 1)
            et_SystemType.MakeArrayType ()
          else
            et_SystemType.MakeArrayType (rank)

        | Intersection(types)   => Message.FatalError($"The intersection of types has detect. Please, specify type manually. Intersected types: ..$(types)");
      }
    }
  }
} // end ns
