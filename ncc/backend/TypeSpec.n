using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  [Record]
  public abstract class TypeSpec[TTypeSig] : IBackendType
    where TTypeSig : DN.TypeSig
  {
    public TypeSig : TTypeSig { get; }

    public TypeRef : DN.TypeSpec
    {
      [RecordIgnore] mutable _typeRef : DN.TypeSpec;
      get
      {
        when (_typeRef == null)
          _typeRef = DN.TypeSpecUser(TypeSig);
        _typeRef
      }
    }

    MakeGenericType(specialization : FixedType.Class) : IBackendType
      implements IBackendType.MakeGenericType
    {
      Util.ice($"Cannot make generic type from type $TypeSig for $specialization")
    }
  } // class
} // namespace
