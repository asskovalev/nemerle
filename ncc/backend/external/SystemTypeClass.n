using Nemerle.IO;
using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;

using SR  = System.Reflection;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  public class SystemTypeClass
  {
    public mutable Object                                    : System.Type;
    public mutable Array                                     : System.Type;
    public mutable Boolean                                   : System.Type;
    public mutable Byte                                      : System.Type;
    public mutable Char                                      : System.Type;
    public mutable Decimal                                   : System.Type;
    public mutable Double                                    : System.Type;
    public mutable Enum                                      : System.Type;
    public mutable FlagsAttribute                            : System.Type;
    public mutable Int16                                     : System.Type;
    public mutable Int32                                     : System.Type;
    public mutable Int64                                     : System.Type;
    public mutable IntPtr                                    : System.Type;
    public mutable Delegate                                  : System.Type;
    public mutable MulticastDelegate                         : System.Type;
    public mutable Reflection_AssemblyConfigurationAttribute : System.Type;
    public mutable Reflection_FieldInfo                      : System.Type;
    public mutable Reflection_PropertyInfo                   : System.Type;
    public mutable Reflection_DefaultMemberAttribute         : System.Type;
    public mutable Runtime_CompilerServices_IsVolatile       : System.Type;
    public mutable DebuggableAttribute                       : System.Type;
    public mutable DebuggableAttribute_DebuggingModes        : System.Type;
    public mutable CompilationRelaxationsAttribute           : System.Type;
    public mutable SByte                                     : System.Type;
    public mutable Single                                    : System.Type;
    public mutable String                                    : System.Type;
    public mutable Type                                      : System.Type;
    public mutable UInt16                                    : System.Type;
    public mutable UInt32                                    : System.Type;
    public mutable UInt64                                    : System.Type;
    public mutable Void                                      : System.Type;
    public mutable ParamArrayAttribute                       : System.Type;

  // set in LibrariesLoader upon first possiblity
    public mutable ExtensionAttribute                        : System.Type;
    public mutable ExtensionAttributeAssembly                : string;
    public mutable SQ_ExtensionAttribute                     : System.Type;
    public mutable SQ_ExtensionAttributeAssembly             : string;

    public mutable RuntimeHelpers_get_OffsetToStringData     : SR.MethodInfo;
    public mutable Decimal_ctors                             : Hashtable [string, SR.ConstructorInfo];
    public mutable Type_GetTypeFromHandle                    : SR.MethodInfo;
    public mutable MethodBase_GetMethodFromHandle            : SR.MethodInfo;
    public mutable MethodBase_GetMethodFromHandle2           : SR.MethodInfo;
    public mutable FieldInfo_GetFieldFromHandle              : SR.MethodInfo;
    public mutable FieldInfo_GetFieldFromHandle2             : SR.MethodInfo;
    public mutable AssemblyBuilder_EmbedResourceFile         : SR.MethodInfo;
    public mutable String_opEquality                         : SR.MethodInfo;
    public mutable String_opInequality                       : SR.MethodInfo;
    public mutable Decimal_opEquality                        : SR.MethodInfo;
    public mutable String_Concat                             : SR.MethodInfo;
    public mutable ObjectCtor                                : SR.ConstructorInfo;
    public mutable Delegate_Combine                          : SR.MethodInfo;
    public mutable Delegate_Remove                           : SR.MethodInfo;

    public NemerleAttribute : System.Type
    {
      mutable nemerle_attribute : System.Type;

      get
      {
        when (nemerle_attribute == null)
          InternalType.InitNemerleTypes ();

        nemerle_attribute
      }

    internal set { nemerle_attribute = value; }
    }

    public NullMatchException : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.NullMatchException_tc) }
    }

    public ContainsMacroAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.ContainsMacroAttribute_tc) }
    }

    public VariantAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.VariantAttribute_tc) }
    }

    public VariantOptionAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.VariantOptionAttribute_tc) }
    }

    public VolatileModifier : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.VolatileModifier_tc) }
    }

    public ImmutableAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.ImmutableAttribute_tc) }
    }

    public ConstantVariantOptionAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.ConstantVariantOptionAttribute_tc) }
    }

    public TypeAliasAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.TypeAliasAttribute_tc) }
    }

    public ExtensionPatternEncodingAttribute : System.Type
    {
      get { SystemHelpers.GetSystemType(InternalType.ExtensionPatternEncodingAttribute_tc) }
    }

  /**
   * Reflects a type using NamespaceTree
   */
    public Reflect (type_name : string) : System.Type
    {
      match (Manager.NameTree.LookupSystemTypeOpt(type_name))
      {
        | Some (t) => t
        | _ => Util.ice ("cannot reflect `" + type_name + "'")
      }
    }

    internal Init () : void
    {
      Array = Reflect ("System.Array");
      Boolean = Reflect ("System.Boolean");
      Byte = Reflect ("System.Byte");
      Char = Reflect ("System.Char");
      Decimal = Reflect ("System.Decimal");
      Double = Reflect ("System.Double");
      Enum = Reflect ("System.Enum");
      FlagsAttribute = Reflect ("System.FlagsAttribute");
      Int16 = Reflect ("System.Int16");
      Int32 = Reflect ("System.Int32");
      Int64 = Reflect ("System.Int64");
      IntPtr = Reflect ("System.IntPtr");
      Delegate = Reflect ("System.Delegate");
      MulticastDelegate = Reflect ("System.MulticastDelegate");
      Object = Reflect ("System.Object");
      Reflection_FieldInfo = Reflect ("System.Reflection.FieldInfo");
      Reflection_PropertyInfo = Reflect ("System.Reflection.PropertyInfo");
      Reflection_AssemblyConfigurationAttribute = Reflect ("System.Reflection.AssemblyConfigurationAttribute");
      Runtime_CompilerServices_IsVolatile = Reflect ("System.Runtime.CompilerServices.IsVolatile");
      DebuggableAttribute = Reflect ("System.Diagnostics.DebuggableAttribute");
      DebuggableAttribute_DebuggingModes = Reflect ("System.Diagnostics.DebuggableAttribute.DebuggingModes");
      CompilationRelaxationsAttribute = Reflect ("System.Runtime.CompilerServices.CompilationRelaxationsAttribute");
      SByte = Reflect ("System.SByte");
      Single = Reflect ("System.Single");
      String = Reflect ("System.String");
      SystemTypeCache.Type = Reflect ("System.Type");
      UInt16 = Reflect ("System.UInt16");
      UInt32 = Reflect ("System.UInt32");
      UInt64 = Reflect ("System.UInt64");
      Void = Reflect ("System.Void");
      ParamArrayAttribute = Reflect ("System.ParamArrayAttribute");
      Reflection_DefaultMemberAttribute = Reflect ("System.Reflection.DefaultMemberAttribute");

    {
      Decimal_ctors = Hashtable ();
      def decimal_ctors = SystemTypeCache.Decimal.GetConstructors ();

      foreach (decimal_ctor : SR.ConstructorInfo in decimal_ctors) {
        def parameters = decimal_ctor.GetParameters ().NToList();
        def ctor_name = $<#..$(parameters; ", "; p => p.ParameterType.Name)#>;
        Decimal_ctors [ctor_name] = decimal_ctor;
      }

      assert(Decimal_ctors.Count >=  7)
    }

      RuntimeHelpers_get_OffsetToStringData = typeof(SRC.RuntimeHelpers).GetMethod("get_OffsetToStringData");
      Type_GetTypeFromHandle                = SystemTypeCache.Type.GetMethod ("GetTypeFromHandle");
      MethodBase_GetMethodFromHandle        = typeof(SR.MethodBase).GetMethod("GetMethodFromHandle", array[typeof(System.RuntimeMethodHandle)]);
      MethodBase_GetMethodFromHandle2       = typeof(SR.MethodBase).GetMethod("GetMethodFromHandle", array[typeof(System.RuntimeMethodHandle), typeof(System.RuntimeTypeHandle)]);
      FieldInfo_GetFieldFromHandle          = typeof(SR.FieldInfo) .GetMethod("GetFieldFromHandle",  array[typeof(System.RuntimeFieldHandle)]);
      FieldInfo_GetFieldFromHandle2         = typeof(SR.FieldInfo) .GetMethod("GetFieldFromHandle",  array[typeof(System.RuntimeFieldHandle),  typeof(System.RuntimeTypeHandle)]);
      AssemblyBuilder_EmbedResourceFile     = Reflect ("System.Reflection.Emit.AssemblyBuilder")
                                             .GetMethod ("EmbedResourceFile", SR.BindingFlags.Instance %| SR.BindingFlags.Public
                                                         %| BindingFlags.NonPublic, null, SR.CallingConventions.Any,
                                                         array [String, String], null);
      String_opEquality = SystemTypeCache.String.GetMethod ("op_Equality");
      String_opInequality = SystemTypeCache.String.GetMethod ("op_Inequality");
      String_Concat = String.GetMethod ("Concat", array [String, String]);
      Decimal_opEquality = SystemTypeCache.Decimal.GetMethod ("op_Equality");
      ObjectCtor = Object.GetConstructor (System.Type.EmptyTypes);
      assert(ObjectCtor != null);

      Delegate_Combine = Delegate.GetMethod ("Combine", array [Delegate, Delegate]);
      Delegate_Remove = Delegate.GetMethod ("Remove", array [Delegate, Delegate]);
    }

    internal this (man : ManagerClass)
    {
      Manager = man;
    }
  }
} // end ns
