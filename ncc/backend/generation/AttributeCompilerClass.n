using Nemerle.Assertions;
using Nemerle.Compiler.Backend;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.IO;
using Nemerle.Compiler.Typedtree;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  class AttributeCompilerClass
  {
    internal this(man : ManagerClass)
    {
      Manager = man;
    }

    internal CompileAttribute(env : GlobalEnv, ti : TypeBuilder, expr : PT.PExpr) : System.AttributeTargets * DN.CustomAttribute * bool
    {
      def (tc, parms) = CheckAttribute (env, expr);
      if (is_security_attribute(tc))
        (0 :> System.AttributeTargets, null, true)
      else
      {
        def (attrBuilder, shouldEmit) = do_compile (env, ti, tc, parms);
        (tc.AttributeTargets, attrBuilder, shouldEmit);
      }
    }

    internal ResolveAttribute (env : GlobalEnv, expr : PT.PExpr, expect_exact : TypeInfo = null) : option [TypeInfo * list [PT.PExpr]]
    {
      def add_end (l, suff : string)
      {
        match (l) {
          | [x] => [x + suff]
          | x :: xs => x :: add_end (xs, suff)
          | _ => Util.ice ("empty")
        }
      }

      match (expr) {
        | <[ $(_ : name) ]>
        | <[ $_x . $_y ]> =>
            ResolveAttribute (env, <[ $expr () ]>, expect_exact)

        | <[ $name ( .. $parms ) ]> =>
            match (Util.QidOfExpr (name)) {
              | Some ((id, name)) =>
                  def is_attribute (t : TypeInfo) {
                    if (expect_exact != null)
                      t.Equals (expect_exact)
                    else
                      t.IsDerivedFrom(InternalType.Attribute_tc)
                  }

                  def ctx = name.GetEnv (env);
                  def plain = ctx.LookupType (id);
                  def withattr = ctx.LookupType (add_end (id, "Attribute"));

                  match ((plain, withattr)) {
                    | (Some (t), None)
                    | (None, Some (t)) =>
                        if (is_attribute (t))
                          Some ((t, parms))
                        else if (expect_exact == null)
                               Message.FatalError ($"`$(t.FullName)' is not an attribute class");
                             else None ()

                    | (Some (t1), Some (t2)) =>
                        if (is_attribute (t1))
                          if (is_attribute (t2))
                            Message.FatalError ($"ambiguous attribute type name,"
                                                 " it could be `$(t1)' or `$(t2)'");
                          else
                            Some ((t1, parms))
                        else
                          if (is_attribute (t2)) Some ((t2, parms))
                          else if (expect_exact == null)
                                 Message.FatalError ($"neither `$(t1)' nor `$(t2)' is an attribute class");
                               else None ()

                    | _ => None ()
                  }

              | _ => None ()
            }
        | _ => None ()
      }
    }

    internal CheckAttribute (env : GlobalEnv, expr : PT.PExpr) : TypeInfo * list [PT.PExpr]
    {
      Util.locate (expr.Location,
                   match (ResolveAttribute(env, expr))
                   {
                     | Some ((t, parms)) => (t, parms.Map(parm => ConstantFolder.FoldConstants(env, parm)))
                     | None =>
                         Message.FatalError ($"the custom attribute `$(PrettyPrint.SprintExpr(None(), expr))' could not be found or is invalid")
                   })
    }

    internal GetCompiledAssemblyAttributes (attrs : SCG.List [GlobalEnv * PT.PExpr])
    : list [DN.CustomAttribute * bool]
    {
      mutable result = [];
      foreach ((env, attr) in attrs) {
        def (tc, parms) = CheckAttribute (env, attr);
        unless (tc.Equals (InternalType.AssemblyVersionAttribute_tc) || is_security_attribute (tc)) {
          result ::= do_compile (env, null, tc, parms);
        }
      }
      result
    }

    internal GetPermissionSets (attrs : SCG.IEnumerable [GlobalEnv * PT.PExpr])
    : SCG.Dictionary[DN.SecurityAction, SCG.List[DN.SecurityAttribute]]
    {
      def result = SCG.Dictionary();
      foreach ((env, attr) in attrs)
      {
        def (tc, parms) = CheckAttribute (env, attr);

        when (is_security_attribute (tc))
        {
          def (ctor, ctorArgs, namedArgs) = pre_compile(env, null, tc, parms);
          def action = System.Convert.ToInt32(ctorArgs[0].Value) :> DN.SecurityAction;
          mutable attributeList;
          unless (result.TryGetValue(action, out attributeList))
          {
            attributeList = SCG.List();
            result.Add(action, attributeList);
          }
          attributeList.Add(DN.SecurityAttribute(ctor.DeclaringType, namedArgs));
        }
      }
      result
    }

    internal GetPermissionSets (env : GlobalEnv, attrs : SCG.IEnumerable [PT.PExpr])
    : SCG.Dictionary[DN.SecurityAction, SCG.List[DN.SecurityAttribute]]
    {
      GetPermissionSets(attrs.Map(attr => (env, attr)));
    }

    internal MakeEmittedAttribute (attr_type : DN.TypeDef, value : string) : DN.CustomAttribute
    {
      MakeEmittedAttribute(attr_type, SystemTypeCache.String, value);
    }

    internal MakeEmittedAttribute(attr_type : DN.TypeDef) : DN.CustomAttribute
    {
      _ = this; // shut up!
      def constructor_info = attr_type.GetMethod(".ctor");
      DN.CustomAttribute(constructor_info)
    }

    internal MakeEmittedAttribute(attr_type : DN.TypeDef, value : int) : DN.CustomAttribute
    {
      MakeEmittedAttribute (attr_type, SystemTypeCache.Int32, value);
    }

    internal MakeEmittedAttribute (attr_type : DN.TypeDef, paramType : DN.TypeDef, value : object) : DN.CustomAttribute
    {
      _ = this; // shut up!
      def constructor_info  = attr_type.GetMethod(".ctor", paramType);
      def attribute         = DN.CustomAttribute(constructor_info);
      def attributeArgument = DN.CAArgument(DN.Extensions.ToTypeSig(paramType), value);
      attribute.ConstructorArguments.Add(attributeArgument);
      attribute
    }

    internal CheckPInvoking (meth : MethodBuilder, tb : DN.TypeDef, attrs : DN.MethodAttributes, sig : DN.MethodSig) : DN.MethodDef
    {
      foreach (expr in meth.GetModifiers().GetCustomAttributes())
      {
        def env = meth.DeclaringType.GlobalEnv;
        when (ResolveAttribute(env, expr) is Some((tc, dllName :: parms)) when tc.Equals(InternalType.DllImport_tc))
        {
          when (meth.Attributes & NemerleModifiers.Extern == 0)
            Message.Error (expr.Location, "only methods marked with `extern' modifier can have `System.Runtime.InteropServices.DllImport' attribute");

          mutable moduleRef;
          match(ConstantFolder.FoldConstants(env, dllName, meth.DeclaringType))
          {
            | <[ $(dllName : string) ]> => moduleRef = DN.ModuleRefUser(Manager.GeneratedAssembly, dllName)
            | _ => Message.Error(dllName.Location, $"in argument #1 (dllName), constant expression of type `$(InternalType.String_tc)' required")
          }

          mutable entry_point         : string;
          mutable callingconv         : DN.PInvokeAttributes?;
          mutable charset             : DN.PInvokeAttributes?;
          mutable preserve_sig        : bool?;
          mutable best_fit_mapping    : bool?;
          mutable throw_on_unmappable : bool?;
          mutable exact_spelling      : bool;
          mutable set_last_error      : bool;

          foreach (p in parms)
          {
            | <[ $(target : dyn) = $val ]> =>
              match ((target, ConstantFolder.FoldConstants (env, val)))
              {
                | ("CallingConvention", PT.PExpr.Literal(x)) =>
                    callingconv =
                      match (System.Convert.ToInt32(x.AsObject(InternalType)))
                      {
                        | 1 => DN.PInvokeAttributes.CallConvWinapi
                        | 2 => DN.PInvokeAttributes.CallConvCdecl
                        | 3 => DN.PInvokeAttributes.CallConvStdcall
                        | 4 => DN.PInvokeAttributes.CallConvThiscall
                        | 5 => DN.PInvokeAttributes.CallConvFastcall
                        | _ =>
                          Message.Error(val.Location, $"Invalid `CallingConvention` value `$x`");
                          null
                      }

                | ("CharSet", PT.PExpr.Literal(x)) =>
                    charset =
                      match (System.Convert.ToInt32(x.AsObject(InternalType)))
                      {
                        | 1 => DN.PInvokeAttributes.CharSetNotSpec
                        | 2 => DN.PInvokeAttributes.CharSetAnsi
                        | 3 => DN.PInvokeAttributes.CharSetUnicode
                        | 4 => DN.PInvokeAttributes.CharSetAuto
                        | _ =>
                          Message.Error(val.Location, $"Invalid `CharSet` value `$x`");
                          null
                      }

                | ("BestFitMapping",        <[ $(val : bool) ]>)   => best_fit_mapping    = val
                | ("EntryPoint",            <[ $(val : string) ]>) => entry_point         = val
                | ("ExactSpelling",         <[ $(val : bool) ]>)   => exact_spelling      = val
                | ("PreserveSig",           <[ $(val : bool) ]>)   => preserve_sig        = val
                | ("SetLastError",          <[ $(val : bool) ]>)   => set_last_error      = val
                | ("ThrowOnUnmappableChar", <[ $(val : bool) ]>)   => throw_on_unmappable = val
                | (name, val) => Message.Error(val.Location, $"value is not valid for parameter $name")
              }
            | _ => Message.Error (p.Location, "unnamed DllImport parameter")
          }

          mutable flags = (callingconv ?? DN.PInvokeAttributes.CallConvWinapi)
                        %| (charset ?? DN.PInvokeAttributes.CharSetAnsi);

          when (best_fit_mapping.HasValue)
          {
            flags |=
              if (best_fit_mapping.GetValueOrDefault())
                DN.PInvokeAttributes.BestFitEnabled
              else
                DN.PInvokeAttributes.BestFitDisabled
          }

          when (throw_on_unmappable.HasValue)
          {
            flags |=
              if (throw_on_unmappable.GetValueOrDefault())
                DN.PInvokeAttributes.ThrowOnUnmappableCharEnabled
              else
                DN.PInvokeAttributes.ThrowOnUnmappableCharDisabled
          }

          when (exact_spelling)
            flags |= DN.PInvokeAttributes.NoMangle;

          when (set_last_error)
            flags |= DN.PInvokeAttributes.SupportsLastError;

          def mb = DN.MethodDefUser(meth.Name, sig, attrs | DN.MethodAttributes.PInvokeImpl | DN.MethodAttributes.HideBySig);
          mb.ImplMap = DN.ImplMapUser(moduleRef, entry_point ?? meth.Name, flags);
          when (preserve_sig.HasValue)
            mb.IsPreserveSig = preserve_sig.GetValueOrDefault();

          meth.GetModifiers().custom_attrs = meth.GetModifiers().custom_attrs.Filter(x => x : object != expr);
          return mb
        }
      }
      null
    }

    internal CheckConditional(mb : MethodBuilder) : void
    {
      def getErrorLocation()
      {
        match(mb.GetModifiers().FindAttribute(InternalType.Conditional_tc, mb.GlobalEnv))
        {
          | Some(expr) => expr.Location
          | _ => Util.ice($"Conditional attribute not found in `$mb'")
        }
      }

      when(mb.DeclaringType.IsInterface)
      {
        Message.Error(getErrorLocation(),
                      "Conditional attribute is not valid on interface members");
        return;
      }

      when(mb.IsConstructor
        || (mb.GetModifiers().mods %&& NemerleModifiers.SpecialName
           && mb.Header.Name.StartsWith("op_")))
      {
        Message.Error(getErrorLocation(),
                      "Conditional attribute is not valid on constructor, operator, or explicit interface implementation");
        return;
      }

      when(mb.ImplementedMethods is (_, ifaceMember) :: _)
      {
        Message.Error(getErrorLocation(),
                      $"Conditional member `$mb' cannot implement interface member `$ifaceMember'");
        return;
      }

      when(mb.GetModifiers().mods %&& NemerleModifiers.Override)
      {
        Message.Error(getErrorLocation(),
                      $"Conditional attribute is not valid on `$mb' because it is an override method");
        return;
      }

      unless(mb.ReturnType.Equals(Manager.InternalType.Void))
      {
        Message.Error(getErrorLocation(),
                      $"Conditional attribute is not valid on `$mb' because its return type is not void");
        return;
      }

      foreach(parm when parm.kind == ParamKind.Out in mb.GetParameters())
      {
        Message.Error(getErrorLocation(),
                      $"conditional member `$mb' cannot have an out parameter");
        break;
      }
    }

    private is_security_attribute(ti : TypeInfo) : bool
    {
      Manager.InternalType.SecurityAttribute_tc.GetMemType().TryProvide(ti.GetMemType());
    }

    private compile_expr(env : GlobalEnv, expr : PT.PExpr, typer : Typer, mutable expected : TypeVar = null) : object * FixedType
    {
      def compile_type(loc, fixedType)
      {
        match (fixedType)
        {
          | FixedType.Class
          | FixedType.Tuple
          | FixedType.Fun
          | FixedType.Array
          | FixedType.Void => 
            (SystemHelpers.GetSystemType(fixedType), InternalType.Type)
          | _ => 
            Message.FatalError(loc, "invalid type in attribute parameter")
        }
      }

      def expr2 = ConstantFolder.FoldConstants(env, expr);
      when (expr2 == null)
        throw Recovery();
      when (expected == null)
        expected = typer.FreshTypeVar();
      def tExpr = typer.TypeExpr(expr2, expected);
      def convert(tExpr : TExpr) : object * FixedType
      {
        | TExpr.Error => throw Recovery() // the typer already report error
        | TExpr.DebugInfo(subExpr, _) => convert(subExpr)
        | TExpr.Literal(Literal.Decimal) => Message.FatalError(tExpr.Location, "An attribute argument cannot be number of type decimal");
        | TExpr.Literal(lit) => (lit.AsObject(InternalType), lit.GetInternalType(InternalType))
        | TExpr.TypeConversion(subExpr, t, ConversionKind.UpCast, _) when subExpr.Type.TryRequire(t) => convert(subExpr)
        | TExpr.TypeConversion(TExpr.Literal(lit) as e, t, ConversionKind.UpCast, _) => 
            match (ConstantFolder.ConvertLiteral(lit, t.Fix()))
            {
              | Some(convertedLit) => convert(TExpr.Literal(e.Location, t, convertedLit))
              | _ => Message.FatalError(tExpr.Location, $"Type conversion from $(e.Type) to $t in attribute a argument is unsupported.");
            }

        | TExpr.TypeOf(type) => compile_type(tExpr.Location, type.Fix())
        | TExpr.Array(elems, [_]) => 
            def objects      = elems.MapToArray(e => convert(e)[0]);
            def elemType     = tExpr.Type.Fix();
            (objects : object, elemType)

        | TExpr.Array => Message.FatalError(tExpr.Location, "only single-dimensional arrays allowed in attributes")
        | _ => Message.FatalError(tExpr.Location, $"only constant expressions allowed in attributes: $expr ($(tExpr.Type))")
      }

      convert(tExpr)
    }

    private pre_compile(env : GlobalEnv, ti : TypeBuilder, attr : TypeInfo, parms : list [PT.PExpr])
        : DN.MethodDef * SCG.List[DN.CAArgument] * SCG.List[DN.CANamedArgument]
    {
      def typer = Typer(env, ti);
      mutable ctor_parm_types = [];
      mutable ctorArgs = SCG.List();
      mutable namedArgs = SCG.List();

      foreach (parm in parms)
      {
        | <[ $(n : name) = $expr ]> =>
            def name      = n.Id;
            def expr      = ConstantFolder.FoldConstants(env, expr);
            def (obj, ty) = compile_expr(env, expr, typer);
            def (isField, mem) =
                match (attr.LookupMember(name))
                {
                  | [IMember(MemberKind = MemberKinds.Field)    as mem] => (true, mem)
                  | [IMember(MemberKind = MemberKinds.Property) as mem] => (false, mem)
                  | _ => Message.FatalError($"the type $(attr.FullName) has no field nor property named `$name'")
                };

            when (mem.DeclaringType is TypeBuilder as tb)
              tb.EmitImplementation(); // we can't use a unfinalized attribute

            def memberType = mem.GetMemType();
            if (ty.Require(memberType))
            {
              def value = DN.CAArgument(SystemHelpers.GetSystemType(ty), obj);
              namedArgs.Add(DN.CANamedArgument(isField, SystemHelpers.GetSystemType(memberType), name, value));
            }
            else
              Message.FatalError ($"the member `$name' has type $(mem.GetMemType()) while the value assigned has type $ty")

        | _ =>
            def (obj, ty) = compile_expr(env, parm, typer);
            ctor_parm_types ::= ty;
            ctorArgs.Add(DN.CAArgument(SystemHelpers.GetSystemType(ty), obj));
      }

      def proper_ctor = 
        {
          mutable overloads = [];

          foreach (meth is IMethod when meth.IsConstructor && !meth.IsPrivate in attr.LookupMember(".ctor"))
          {
           def ty   = meth.GetMemType();
           def from = attr.GetMemType();

           overloads ::= OverloadPossibility(typer, ty, null, from, meth);

           when (meth.IsVarArgs)
           {
             def op = OverloadPossibility (typer, ty, null, from, meth);
             op.VarArgs = true;
             overloads ::= op;
           }
          }

          def parms = ctor_parm_types.RevMap(ty => Param(TExpr.DefaultValue(ty)));

          match(typer.ResolveOverload(overloads, parms, Manager.InternalType.Void, false, LocationStack.Top()))
          {
           | [] => Message.FatalError($"none of the constructors of `$(attr.FullName)'matches positional argument types $(ctor_parm_types.Rev())");
           | [one] => one.Member :> IMethod
           | lst =>
               Message.Error( $"ambiguity between custom attribute constructors $lst");
               lst.Head.Member :> IMethod
          }
        };

      when (proper_ctor.IsVarArgs)
      {
        def parameters    = proper_ctor.GetParameters();
        def requiredCount = parameters.Length;
        def varArgType    = SystemHelpers.GetSystemType(parameters.Last.Type);
        when (requiredCount != ctorArgs.Count || !DN.TypeEqualityComparer.Instance.Equals(ctorArgs[ctorArgs.Count - 1].Type, varArgType))
        {
          def arrayItems = SCG.List();
          for (mutable index = requiredCount - 1; index < ctorArgs.Count; ++index)
            arrayItems.Add(ctorArgs[index]);

          ctorArgs.RemoveRange(requiredCount - 1, arrayItems.Count);

          def varArg = DN.CAArgument(varArgType, arrayItems);
          ctorArgs.Add(varArg);
        }
      }

      when (proper_ctor is MethodBuilder as mb)
        mb.HasBeenUsed = true;

      ((proper_ctor :> IBackendMethod).GetMethodInfo(), ctorArgs, namedArgs)
    }

    private do_compile(env : GlobalEnv, ti : TypeBuilder, attr : TypeInfo, parms : list [PT.PExpr]) : DN.CustomAttribute * bool
    {
      def (ctor, ctorArgs, namedArgs) = pre_compile(env, ti, attr, parms);
      def attrBuilder = DN.CustomAttribute(ctor, ctorArgs, namedArgs);
      def shouldEmit = if (attr.IsConditional) attr.EvalConditions(env) else true;
      (attrBuilder, shouldEmit)
    }
  } // AttributeCompilerClass
} // namespace