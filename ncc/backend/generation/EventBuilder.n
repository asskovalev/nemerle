using Nemerle.Compiler.Backend;
using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  public partial class EventBuilder
  {
    /**
     * Adds an event builder
     */
    internal override CreateEmitBuilder(tb : Emit.TypeBuilder) : void
    {
      def ty = this.GetMemType().GetSystemType();
      event_builder = tb.DefineEvent(Name, EventAttributes.None, ty);
    }

    internal override Compile () : void
    {
      base.Compile ();
      unless (modifiers.IsEmpty) {
        modifiers.SaveCustomAttributes (declaring_type, fun (target, a, shouldEmit) {
          if (target %&& System.AttributeTargets.Event) {
            when(shouldEmit)
              event_builder.SetCustomAttribute (a);
            null
          }
          else "event " + ToString ()
        });
      }

      event_builder.SetAddOnMethod(adder.GetMethodBuilder());
      event_builder.SetRemoveOnMethod(remover.GetMethodBuilder());
    }
  }
}
