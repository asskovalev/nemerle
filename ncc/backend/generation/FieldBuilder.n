using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  public partial class FieldBuilder : IBackendMember, IBackendField
  {
    mutable field_builder : SRE.FieldBuilder;

    GetFieldInfo() : SRE.FieldBuilder
      implements IBackendField.GetFieldInfo
    {
      assert(field_builder != null, Name);
      field_builder
    }

    GetHandle() : System.Reflection.MemberInfo
      implements IBackendMember.GetHandle
    {
      assert(field_builder != null, Name);
      field_builder
    }
  
    /**
     * Adds a field builder
     */
    internal override CreateEmitBuilder (tb : Emit.TypeBuilder) : void
    {
      // Converts Nemerle modifiers to the CLI field attributes.
      def make_field_attributes (attrs)
      {
        mutable result = FieldAttributes.PrivateScope;

        when (attrs %&& NemerleModifiers.Public) result |= FieldAttributes.Public;
        when (attrs %&& NemerleModifiers.Private) result |= FieldAttributes.Private;

        if (attrs %&& NemerleModifiers.Internal)
          if (attrs %&& NemerleModifiers.Protected)
            result |= FieldAttributes.FamORAssem;
          else
            result |= FieldAttributes.Assembly
        else
          when (attrs %&& NemerleModifiers.Protected)
            result |= FieldAttributes.Family;

        when (attrs %&& NemerleModifiers.Static) result |= FieldAttributes.Static;
        when (attrs %&& NemerleModifiers.SpecialName) result |= FieldAttributes.SpecialName %|
            FieldAttributes.RTSpecialName;

        unless (attrs %&& (NemerleModifiers.Mutable | NemerleModifiers.CompilerMutable))
          result |= FieldAttributes.InitOnly;

        result
      }

      mutable attrs = make_field_attributes (Attributes);

      when (IsLiteral) {
        attrs |= FieldAttributes.Literal;
        attrs &= ~FieldAttributes.InitOnly;
      }

      // prevent verification failure
      when (Name != "value__")
        attrs &= ~FieldAttributes.RTSpecialName;

      field_builder = tb.DefineField (
        Name,
        SystemHelpers.GetSystemType(GetMemType()),
        required_modifiers.ToArray (),
        optional_modifiers.ToArray (),
        attrs);

      when (IsLiteral)
        field_builder.SetConstant(const_value.AsObject(InternalType));
    }

    internal override Compile () : void
    {
      base.Compile ();
      unless (modifiers.IsEmpty) {
        modifiers.SaveCustomAttributes (declaring_type, fun (target, a, shouldEmit) {
          if (target %&& System.AttributeTargets.Field) {
            when(shouldEmit)
              field_builder.SetCustomAttribute (a);
            null
          }
          else "field " + ToString ()
        });
      }

      when (IsVolatile) {
        def volatile_attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.VolatileModifier);
        field_builder.SetCustomAttribute (volatile_attr)
      }

      when (!IsMutable && !IsLiteral && attributes %&& NemerleModifiers.CompilerMutable)
      {
        def imm_attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.ImmutableAttribute);
        field_builder.SetCustomAttribute (imm_attr)
      }
    }
  }
}
