using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  public partial class PropertyBuilder
  {
    /**
     * Adds a property builder
     */
    internal override CreateEmitBuilder(tb : Emit.TypeBuilder) : void
    {
      // Converts Nemerle modifiers to the CLI property attributes.
      def make_property_attributes (attrs)
      {
        mutable result = PropertyAttributes.None;

        when (attrs %&& NemerleModifiers.SpecialName)
          result |= PropertyAttributes.SpecialName %| PropertyAttributes.RTSpecialName;

        result
      }

      def attrs = make_property_attributes (Attributes);
      def ty = if (IsIndexer) SystemHelpers.GetSystemType((GetMemType() :> FixedType.Fun).to) else SystemHelpers.GetSystemType(GetMemType());
      def parms = parms.MapToArray (SystemHelpers.GetSystemType);

      def (ret_type_req_mods, ret_type_opt_mods) = {
        def getter = GetGetter ();

        if (getter == null)
          (null, null)
        else
          ( (getter :> MethodBuilder).Header.GetRetTypeRequiredModifiers (),
            (getter :> MethodBuilder).Header.GetRetTypeOptionalModifiers () )
      }

      def (param_type_req_mods, param_type_opt_mods) = {
        def setter = GetSetter () :> MethodBuilder;

        if (setter == null)
          (null, null)
        else
        {
          def chop (a) { if (a == null) null else a.ChopLastN (1) }
          ( chop (setter.Header.GetParamTypeRequiredModifiers ()),
            chop (setter.Header.GetParamTypeOptionalModifiers ()) )
        }
      }

      property_builder = tb.DefineProperty (
        Name,
        attrs,
        ty,
        ret_type_req_mods,
        ret_type_opt_mods,
        parms,
        param_type_req_mods,
        param_type_opt_mods);
    }

    internal override Compile () : void
    {
      base.Compile ();
      unless (modifiers.IsEmpty) {
        modifiers.SaveCustomAttributes (declaring_type, fun (target, a, shouldEmit) {
          if (target %&& System.AttributeTargets.Property) {
            when(shouldEmit)
              property_builder.SetCustomAttribute (a);
            null
          }
          else "property " + ToString ()
        })
      }

      def declaring = DeclaringType : object;

      // emit getter only if it was defined in this type, not derived
      when (getter != null && getter.DeclaringType == declaring)
        property_builder.SetGetMethod(getter.GetMethodBuilder());

      // emit setter only if it was defined in this type, not derived
      when (setter != null && setter.DeclaringType == declaring)
        property_builder.SetSetMethod(setter.GetMethodBuilder());
    }
  }
}
