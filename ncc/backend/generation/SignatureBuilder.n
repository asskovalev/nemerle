using Nemerle.Collections;
using Nemerle.Compiler.Backend;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  class SignatureBuilder
  {
    private _module_builder   : DN.ModuleDef;
    private mutable _importer : DN.Importer;

    public this(manager : ManagerClass, importer : DN.Importer)
    {
      Manager         = manager;
      _module_builder = Manager.Hierarchy._module_builder;
      _importer       = importer;
    }

    public GetInstantiatedSystemType(t : FixedType, superType : TypeInfo) : DN.TypeSig
    {
      def instantiatedType = if (t is FixedType.Tuple) t else t.GetInstantiatedSuperType(superType);
      instantiatedType.ToTypeSig()
    }

    public GetMethodInfo(from_type : TypeVar, meth : IMethod, typars : list [TypeVar]) : DN.IMethod
    {
      def methodDef        = (meth :> IBackendMethod).GetMethodInfo();
      def system_from_type = GetInstantiatedSystemType(from_type.Fix(), meth.DeclaringType);

      mutable methodRef =
        if (system_from_type is DN.GenericInstSig)
          DN.MemberRefUser(_module_builder, methodDef.Name, _importer.Import(methodDef.MethodSig), DN.TypeSpecUser(system_from_type))
        else
          _importer.Import(methodDef);

      unless (typars.IsEmpty)
      {
        def m_typarms = meth.GetHeader().TypeParameters;
        def errorCount = Message.ErrorCount;
        NList.Iter2 (m_typarms, typars, _.CheckConstraints (_, meth));
        when (errorCount == Message.ErrorCount)
        {
          def pars  = typars.MapToArray(SystemHelpers.ToNonVoidTypeSig(_, _module_builder.CorLibTypes));
          methodRef = DN.MethodSpecUser(methodRef :> DN.IMethodDefOrRef, DN.GenericInstMethodSig(pars));
        }
      }
      methodRef
    }

    public GetFieldInfo(_obj : TExpr, fld : IField) : DN.IField
    {
      def obj_type = GetInstantiatedSystemType(_obj.FixedType(), fld.DeclaringType);
      GetFieldInfo (obj_type, fld);
    }

    public GetFieldInfo(from_type : DN.TypeSig, field : IField) : DN.IField
    {
      def fieldDef = (field :> IBackendField).GetFieldInfo();
      if (from_type is DN.GenericInstSig)
      {
        def fieldRef = DN.MemberRefUser(_module_builder, fieldDef.Name, _importer.Import(fieldDef.FieldSig));
        fieldRef.Class = DN.TypeSpecUser(from_type);
        fieldRef
      }
      else
        _importer.Import(fieldDef)
    }
  } // end of the class
} // end of the namespace
