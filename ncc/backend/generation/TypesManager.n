using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using NC = Nemerle.Compiler;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  /**
   * This part of TypesManages is responsible for generation of System.Reflection.Emit structures
   * composing program hierarchy. It executes emission of all classes and their members.
   */
  [ManagerAccess]
  public partial class TypesManager : System.IDisposable
  {
    /* -- PUBLIC CONSTRUCTORS ---------------------------------------------- */

    // workaround MS.NET bugs with some specific value / generic types hierarchy
    private resolve_hack (_ : object, _ : System.ResolveEventArgs) : Assembly
    {
      //Message.Debug ($ "resolve_hack: $(args.Name)");
      _assembly_builder
    }

    public this (man : ManagerClass)
    {
      Manager = man;
      _OutputFileName = Manager.Options.OutputFileName;

      unless (Manager.Options.TargetIsLibrary)
      {
        _need_entry_point = true;
        _entry_point = None ();
      }

      unless (Manager.IsIntelliSenseMode)
        System.AppDomain.CurrentDomain.TypeResolve += resolve_hack;
    }

    public Dispose () : void
    {
      unless (Manager.IsIntelliSenseMode)
        System.AppDomain.CurrentDomain.TypeResolve -= resolve_hack;
    }

    public CreateAssembly () : void
    {
      // we need to process global assembly attributes before creating assembly name
      _assembly_name = CreateAssemblyName ();

      _assembly_name.Name = Path.GetFileNameWithoutExtension (_OutputFileName);

      def assembly_requirements =
        if (Manager.Options.CompileToMemory)
          Emit.AssemblyBuilderAccess.Run
        else
          Emit.AssemblyBuilderAccess.Save;

      def dir = Path.GetDirectoryName(Path.GetFullPath (_OutputFileName));
      unless (Directory.Exists (dir))
        Message.FatalError ($"specified output directory `$dir' does not exist");

#pragma warning disable 618

      mutable required : PermissionSet;
      mutable optional : PermissionSet;
      mutable refused : PermissionSet;

      foreach ((action, perm_set) in Manager.AttributeCompiler.GetPermissionSets (assembly_attributes)) {
        match (action) {
        | Permissions.SecurityAction.RequestMinimum  => required = perm_set
        | Permissions.SecurityAction.RequestOptional => optional = perm_set
        | Permissions.SecurityAction.RequestRefuse   => refused  = perm_set
        | _ => Message.FatalError ($"$action is not valid here")
        }
      }

      /* define a dynamic assembly */
      this._assembly_builder = System.AppDomain.CurrentDomain.DefineDynamicAssembly(this._assembly_name, assembly_requirements, dir, required, optional, refused);

      GetInformationalAssemblyAttributes().Iter(this._assembly_builder.SetCustomAttribute);
#pragma warning restore 618

      when (_assembly_name.Name == "") Message.FatalError ("name of output assembly cannot be empty");

      /* create a dynamic module */
      this._module_builder =
        if (Manager.Options.CompileToMemory)
          // we cannot give output filename if we are compiling only to Run
          this._assembly_builder.DefineDynamicModule(_assembly_name.Name, Manager.Options.EmitDebug)
        else
          this._assembly_builder.DefineDynamicModule(_assembly_name.Name, Path.GetFileName(_OutputFileName), Manager.Options.EmitDebug);
    
      when (Manager.Options.EmitDebug)
        _debug_emit = _module_builder.GetSymWriter ();
    }

    public IsEmitting : bool { get { _assembly_builder != null } }

    add_resources_to_assembly() : void
    {
      def escape_resource(x : string)
      {
        def cp = x.IndexOf (',');
        if (cp != -1)
          (x.Substring (0, cp), x.Substring (cp + 1))
        else
          // change name from /bar/bar/file.png to file.png namespace
          (x, Path.GetFileName (x));
      }

      /* we can embed resources only on mono or .NET 2.0 */
      foreach (element in Manager.Options.EmbeddedResources) {
        def (file, name) = escape_resource (element);
        try {
          if (File.Exists (file)) {
            def fs = File.OpenRead (file);

            def meth = _module_builder.GetType ().GetMethod ("DefineManifestResource");
            if (meth == null) {
              try {
                def res = array (fs.Length :> int);
                def loop (pos) {
                  if (res.Length == pos) {}
                  else
                    loop (pos + fs.Read(res, pos, res.Length - pos));
                }
                loop (0);

                def meth = _assembly_builder.GetType ()
                  .GetMethod ("EmbedResource", BindingFlags.NonPublic|BindingFlags.Instance);
                if (meth == null)
                  Message.Error ("cannot find API for saving resources");
                else
                  _ = meth.Invoke (_assembly_builder, array [name : object, res,
                                                             ResourceAttributes.Public]);
              }
              finally {
                fs.Dispose ();
              }
            }
            else {
              // this method does the Dispose for us
              _ = meth.Invoke (_module_builder, array [name : object,
                                                       fs, ResourceAttributes.Public])
            }
          }
          else
            Message.Error ("Could not find resource " + file);
        }
        catch {
          | e => Message.Error ("Could not embed resource: " + e.Message);
        }
      }

      foreach (element in Manager.Options.LinkedResources) {
        def (file, name) = escape_resource (element);
        try {
          _assembly_builder.AddResourceFile (name, file);
        }
        catch {
          | _ is FileNotFoundException =>
            Message.Error ("Could not find resource " + file);
          | e is System.ArgumentException =>
            Message.Error ("Could not link resource: " + e.Message);
        }
      }

      def uresource = Manager.Options.UnmanagedResource;
      if(uresource != null) {
        try {
          _module_builder.DefineUnmanagedResource(uresource);
        }
        catch {
          | _ is FileNotFoundException =>
            Message.Error("Could not find resource" + uresource);
          | e is System.ArgumentException =>
            Message.Error($"Could not embed unmanaged resource $uresource: $(e.Message)");
        }
     }
   else
   {
     this._assembly_builder.DefineVersionInfoResource();  
     }

    }

    /**
     *
     */
    public EmitAuxDecls () : void
    {
      compile_all_tyinfos (true)
    }


    /**
     *
     */
    public EmitDecls () : void
    {
      Manager.Solver.Enqueue (fun () {
        compile_all_tyinfos (false);
        foreach ((attr, shouldEmit) when shouldEmit in Manager.AttributeCompiler.GetCompiledAssemblyAttributes (assembly_attributes))
          _assembly_builder.SetCustomAttribute (attr);

        // emit debug attributes
        when (Manager.Options.EmitDebug) {
          def attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.DebuggableAttribute, array [SystemTypeCache.DebuggableAttribute_DebuggingModes],
            DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.Default);
          _assembly_builder.SetCustomAttribute (attr);
        }

        // do not require string literals interning
        def attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.CompilationRelaxationsAttribute, 8);
        _assembly_builder.SetCustomAttribute (attr);
      })
    }

    /**
     * Returns generated assembly for runtime instantations of its types
     */
    public GeneratedAssembly : Assembly
    {
      get { _assembly_builder }
    }


    /**
     * Saves the constructed assembly to a file
     */
    public SaveAssembly () : void
    {
      add_resources_to_assembly ();

      // if there are some nemerle specific metadata encoded in attributes
      when (contains_nemerle_specifics) {
        def attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.Reflection_AssemblyConfigurationAttribute, "ContainsNemerleTypes");
        this._assembly_builder.SetCustomAttribute (attr);
      }

      // set the entry point
      match ((_need_entry_point, _entry_point))
      {
        | (true, Some (entry_point_method_info)) =>
          _assembly_builder.SetEntryPoint (entry_point_method_info,
                                           if (Manager.Options.TargetIsWinexe)
                                             Emit.PEFileKinds.WindowApplication
                                           else
                                             Emit.PEFileKinds.ConsoleApplication)
        | (true, None) =>
          Message.Error ("no suitable entry point (Main function) found")
        | _ => ()
      }

      // save the assembly
      try
      {
        def (portableExecutableKind, imageFileMachine) = make_platform_flags (Manager.Options.Platform);
        _assembly_builder.Save (Path.GetFileName (_OutputFileName), portableExecutableKind, imageFileMachine);
        //when (_debug_emit != null) _debug_emit.Close ();
      }
      catch
      {
        | e is System.UnauthorizedAccessException =>
          Message.Error ($"could not write to output file `$(this._OutputFileName)'"
                         " -- `$(e.Message)'")

        | e is IOException =>
          Message.Error ($"could not write to output file `$(this._OutputFileName)'"
                         " -- `$(e.Message)'")

        | e is System.Runtime.InteropServices.COMException =>
            Message.Error($"Problems saving assembly: $(e.Message)");

        | e is System.ApplicationException =>
          Message.Error (e.Message);
      }
    }

    /* -- PRIVATE METHODS -------------------------------------------------- */


    /**
     * - create S.R.E.TypeBuilders for entire hierarchy of program
     * - add members to those TypeBuilders (only stubs for methods)
     * - emit bodies of methods
     * - finalize value types
     * - finalize all types
     */
    protected virtual compile_all_tyinfos (aux_phase : bool) : void
    {
      def allow_it(ti : TypeBuilder)
      {
        !ti.IsFinalized && is_aux_decl(ti) == aux_phase
      }

      def create_type_emit_builder(ti : TypeBuilder)
      {
        when (allow_it (ti))
        {
          //Message.Debug ("make type builder for " + ti.FullName);
          ti.CreateEmitBuilder ();

          when (ti.Attributes %&& NemerleModifiers.Macro)
          {
            def attr = Manager.AttributeCompiler.MakeEmittedAttribute (SystemTypeCache.ContainsMacroAttribute, ti.GetTypeBuilder ().FullName);
            _assembly_builder.SetCustomAttribute (attr);
          }
        }
      }
      // create members' declarations in SRE.TypeBuilders
      def emit_decls (ti : TypeBuilder)
      {
        when (allow_it(ti))
        {
          // Message.Debug ("generating declarations " + ti.FullName);
          ti.CreateEmitDeclarations()
        }
      }
      def emit_impl(ti : TypeBuilder)
      {
        when (allow_it(ti))
        {
          //Message.Debug ("generating code for " + ti.FullName);
          Manager.MarkTypeBuilderCompiled();
          ti.EmitImplementation()
        }
      }

      when (!aux_phase)
        _cgil_phase = 1;

      Iter(create_type_emit_builder);
      Iter(tb => when (allow_it(tb))
                   tb.UpdateEmittedInheritance());

      when (!aux_phase)
        _cgil_phase = 2;

      // first emit fields of enum types as it is required to compute their sizes,
      // when they are used as fields
      IterConditionally(emit_decls, (x : TypeBuilder) => x.IsEnum);
      IterConditionally(emit_decls, (x : TypeBuilder) => !x.IsEnum);

      when (!aux_phase)
        _cgil_phase = 3;

      // we first finalize value types, because MS.NET runtime requires so
      IterConditionally(emit_impl,
        (x : TypeBuilder) => x.IsValueType && x.DeclaringType == null);

      // now we can finalize everything else
      Iter(emit_impl);

      // MaybeBailout inteferes with the Code Completion Engine
      //unless (Manager.IsIntelliSenseMode)
      //  Message.MaybeBailout ();

      when (!aux_phase)
        _cgil_phase = 4;
    }

    internal EnsureEmitProgress (ti : TypeBuilder) : void
    {
      // Message.Debug ($"ma: $ti -> $mem ");
      when (_cgil_phase >= 1)
      {
        ti.CreateEmitBuilder ();
        ti.UpdateEmittedInheritance ();
      }
    }


    internal MaybeCompile (ti : TypeBuilder, mem : MemberBuilder) : void
    {
      mem.CreateEmitBuilder (ti.GetTypeBuilder ());

      when (_cgil_phase >= 3)
        ti.DoBeforeFinalization(() => mem.Compile())
    }


    /**
     * Check if declaration is auxiliary, used internally etc.
     */
    private static is_aux_decl (ti : TypeBuilder) : bool
    {
      ti.FullName.StartsWith("Nemerle.Internal.")
    }

    private static make_platform_flags (platform : string) : PortableExecutableKinds * ImageFileMachine
    {
      | "x86" =>
        (PortableExecutableKinds.ILOnly | PortableExecutableKinds.Required32Bit
        , ImageFileMachine.I386)

      | "x64" =>
        (PortableExecutableKinds.ILOnly | PortableExecutableKinds.PE32Plus
        , ImageFileMachine.AMD64)

      | ""
      | "anycpu" =>
        (PortableExecutableKinds.ILOnly
        , ImageFileMachine.I386)

      | "ia64" =>
        (PortableExecutableKinds.ILOnly | PortableExecutableKinds.PE32Plus
        , ImageFileMachine.IA64)

      | _ =>
        assert(false)
    }

    /* -- PRIVATE FIELDS --------------------------------------------------- */

    private   mutable _assembly_name              : System.Reflection.AssemblyName;
    private   mutable _assembly_builder           : Emit.AssemblyBuilder;
    internal  mutable _module_builder             : Emit.ModuleBuilder;
    public    mutable _debug_emit                 : ISymbolWriter;
    internal  mutable contains_nemerle_specifics  : bool = false;

    internal          _need_entry_point           : bool;
    /** updated when method with static Main signature is met */
    internal  mutable _entry_point                : option[MethodInfo];

    private           _OutputFileName             : string;
    private   mutable _cgil_phase                 : int;
  }
}
