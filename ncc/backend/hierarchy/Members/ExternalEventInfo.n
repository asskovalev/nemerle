using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  public class ExternalEventInfo : ExternalMemberInfo, IEvent, IBackendMember, IBackendEvent
  {
   [Accessor]
    protected handle   : SR.EventInfo;
    protected adder    : ExternalMethodInfo;
    protected remover  : ExternalMethodInfo;
    protected mem_type : FixedType;

    public this (lib : LibraryReference, h : SR.EventInfo)
    {
      handle = h;
      base (lib);
      def add_method = handle.GetAddMethod (true);
      def remove_method = handle.GetRemoveMethod (true);

      def tenv = (DeclaringType :> ExternalTypeInfo).tenv;
      adder = library.MethodOfMethodInfo(tenv, add_method);
      remover = library.MethodOfMethodInfo (tenv, remove_method);

      assert(adder != null);
      assert(remover != null);

      match (adder.GetMemType ()) 
      {
        | FixedType.Fun (t, _) => mem_type = t.FixedValue;
      }
      
      attributes = adder.Attributes;
    }

    public DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get { library.TypeInfoOfType (handle.DeclaringType) }
    }
    
    public Name       : string      { get { handle.Name } }
    public MemberKind : MemberKinds { get { MemberKinds.Event } }

    public GetAdder()     : IMethod      { adder }
    public GetRemover()   : IMethod      { remover }
    public GetMemType()   : FixedType        { mem_type }

    public CanAccess (_source : TypeInfo) : bool
    {
      // FIXME: this is broken... we need to check method attributes
      true
    }

    GetHandle() : SR.MemberInfo
      implements IBackendMember.GetHandle
    { handle }
    
    GetEventInfo() : SR.EventInfo
      implements IBackendEvent.GetEventInfo
    { handle }
  
    public override ToString () : string { MemberBuilder.DescribeMember (this) }
  } // class
} // namespace
