using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  public class ExternalPropertyInfo : ExternalMemberInfo, IProperty, IBackendMember, IBackendProperty
  {
    [Accessor]
    protected handle     : SR.PropertyInfo;
    [Accessor]
    protected getter     : ExternalMethodInfo;
    [Accessor]  
    protected setter     : ExternalMethodInfo;
    protected any_method : ExternalMethodInfo;
    protected mem_type   : FixedType;

    public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : SR.PropertyInfo)
    {
      handle = h;
      base (lib);
      
      def get_method = handle.GetGetMethod (true);
      def set_method = handle.GetSetMethod (true);

      getter = library.MethodOfMethodInfo (tenv, get_method);
      setter = library.MethodOfMethodInfo (tenv, set_method);

      if (getter == null)
        any_method = setter;
      else
        any_method = getter;

      assert(any_method != null);

      def ret_type = library.TypeOfType (tenv, handle.PropertyType);

      def (args, ret_type) =
        if (getter != null)
          match (getter.GetMemType()) 
          {
            | FixedType.Fun (t, r) => (t.FixedValue.GetFunctionArguments (), r.FixedValue)
          }
        else if (setter != null)
          match (setter.GetMemType ())
          {
            | FixedType.Fun (t, _) =>
              def (args, r) = NList.DivideLast (t.FixedValue.GetFunctionArguments ());
              (args, r)
          }
        else ([], ret_type);

      if (args.IsEmpty)
        mem_type = ret_type;
      else
        mem_type = FixedType.ConstructFunctionType (args, ret_type);
        
      attributes = any_method.Attributes;
    }

    public DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get { library.TypeInfoOfType (handle.DeclaringType) }
    }
    
    public Name       : string      { get { handle.Name } }
    public MemberKind : MemberKinds { get { MemberKinds.Property } }
    public IsMutable  : bool        { get { handle.CanWrite } }

    public GetGetter()                  : IMethod         { getter }
    public GetSetter()                  : IMethod         { setter }
    public GetMemType()                 : FixedType       { mem_type }
    public CanAccess(source : TypeInfo) : bool            { any_method.CanAccess (source) }
    
    GetHandle() : SR.MemberInfo
      implements IBackendMember.GetHandle
    { handle }
    
    GetPropertyInfo() : SR.PropertyInfo
      implements IBackendProperty.GetPropertyInfo
    { handle }
    
    public override ToString()  : string        { MemberBuilder.DescribeMember (this) }

    public IsIndexer : bool
    {
      //[Nemerle.Memoize]
      get
      {
        def index_parms = handle.GetIndexParameters ();
        index_parms.Length > 0
      }
    }
  } // class
} /* namespace */
