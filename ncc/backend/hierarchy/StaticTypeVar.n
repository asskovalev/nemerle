using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Backend;
using Nemerle.Imperative;
using System;
using System.Reflection;

using DN = dnlib.DotNet;
using NC = Nemerle.Compiler;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class StaticTypeVar
  {
    mutable _systemType : DN.GenericParam;

    public this(man : ManagerClass, name : string, gtype : DN.GenericParam)
    {
      this(man, name);
      _systemType = gtype;
    }
    
    public GetSystemType() : DN.GenericParam
    {
      assert(_systemType != null, ToString());
      _systemType
    }

    public GenericSig : DN.GenericSig
    {
      mutable _genericSig : DN.GenericSig;
      get
      {
        when (_genericSig == null)
        {
          assert(_systemType != null, ToString());
          _genericSig =
            if (_systemType.DeclaringMethod != null)
              DN.GenericMVar(_systemType.Number, _systemType.DeclaringMethod)
            else
              DN.GenericVar(_systemType.Number, _systemType.DeclaringType)
        }
        _genericSig
      }
    }

    internal SetGenericBuilder(x : DN.GenericParamUser) : void
    {
      Util.cassert(_systemType == null);
      Util.cassert(x != null);
      x.Flags = special;
      _systemType = x;
    }

    internal UpdateConstraints() : void
    {
      foreach (c in constraints)
      {
        def constraint =
          match (c.ToTypeSig())
          {
            | sig is DN.TypeDefOrRefSig => sig.TypeDefOrRef
            | sig                       => DN.TypeSpecUser(sig)
          };

        _systemType.GenericParamConstraints.Add(DN.GenericParamConstraintUser(constraint));
      }
    }
  }
}