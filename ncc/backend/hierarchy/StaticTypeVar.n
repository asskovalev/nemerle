using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Backend;
using Nemerle.Imperative;
using System;
using System.Reflection;

using SRE = System.Reflection.Emit;
using NC = Nemerle.Compiler;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class StaticTypeVar
  {
    mutable _systemType : System.Type;
    
    public this(man : ManagerClass, name : string, gtype : System.Type)
    {
      this(man, name);
      _systemType = gtype;
    }
    
    public GetSystemType() : System.Type
    {
      assert(_systemType != null, ToString());
      _systemType
    }
  
    internal SetGenericBuilder(x : SRE.GenericTypeParameterBuilder) : void
    {
      Util.cassert(_systemType == null);
      Util.cassert(x != null);
      x.SetGenericParameterAttributes(special);
      _systemType = x;
    }

    internal UpdateConstraints() : void
    {
      def gbuil = _systemType :> SRE.GenericTypeParameterBuilder;

      def ifaces =
        match (constraints) 
        {
          | (FixedType.Class as x) :: _ when x.tycon.IsInterface => constraints
          | x :: xs => gbuil.SetBaseTypeConstraint(x.GetSystemType()); xs
          | [] => []
        };

      unless (ifaces.IsEmpty) 
        gbuil.SetInterfaceConstraints (ifaces.MapToArray(_.GetSystemType ()));
    }
  }
}