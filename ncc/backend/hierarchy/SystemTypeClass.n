using Nemerle.IO;
using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;

using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  public class SystemTypeClass
  {
    internal this(man : ManagerClass) { Manager = man; }
    
    public Object                                    : DN.TypeDef                            { get; private set; }
    public Array                                     : DN.TypeDef                            { get; private set; }
    public Boolean                                   : DN.TypeDef                            { get; private set; }
    public Byte                                      : DN.TypeDef                            { get; private set; }
    public Char                                      : DN.TypeDef                            { get; private set; }
    public Decimal                                   : DN.TypeDef                            { get; private set; }
    public Double                                    : DN.TypeDef                            { get; private set; }
    public Enum                                      : DN.TypeDef                            { get; private set; }
    public FlagsAttribute                            : DN.TypeDef                            { get; private set; }
    public Int16                                     : DN.TypeDef                            { get; private set; }
    public Int32                                     : DN.TypeDef                            { get; private set; }
    public Int64                                     : DN.TypeDef                            { get; private set; }
    public IntPtr                                    : DN.TypeDef                            { get; private set; }
    public Delegate                                  : DN.TypeDef                            { get; private set; }
    public MulticastDelegate                         : DN.TypeDef                            { get; private set; }
    public Reflection_AssemblyConfigurationAttribute : DN.TypeDef                            { get; private set; }
    public Reflection_FieldInfo                      : DN.TypeDef                            { get; private set; }
    public Reflection_PropertyInfo                   : DN.TypeDef                            { get; private set; }
    public Reflection_DefaultMemberAttribute         : DN.TypeDef                            { get; private set; }
    public Runtime_CompilerServices_IsVolatile       : DN.TypeDef                            { get; private set; }
    public DebuggableAttribute                       : DN.TypeDef                            { get; private set; }
    public DebuggableAttribute_DebuggingModes        : DN.TypeDef                            { get; private set; }
    public CompilationRelaxationsAttribute           : DN.TypeDef                            { get; private set; }
    public SByte                                     : DN.TypeDef                            { get; private set; }
    public Single                                    : DN.TypeDef                            { get; private set; }
    public String                                    : DN.TypeDef                            { get; private set; }
    public Type                                      : DN.TypeDef                            { get; private set; }
    public UInt16                                    : DN.TypeDef                            { get; private set; }
    public UInt32                                    : DN.TypeDef                            { get; private set; }
    public UInt64                                    : DN.TypeDef                            { get; private set; }
    public Void                                      : DN.TypeDef                            { get; private set; }
    public ParamArrayAttribute                       : DN.TypeDef                            { get; private set; }
    public RuntimeHelpers_get_OffsetToStringData     : DN.MethodDef                          { get; private set; }
    public Decimal_ctors                             : Hashtable [string, DN.MethodDef]      { get; private set; }
    public Type_GetTypeFromHandle                    : DN.MethodDef                          { get; private set; }
    public MethodBase_GetMethodFromHandle            : DN.MethodDef                          { get; private set; }
    public MethodBase_GetMethodFromHandle2           : DN.MethodDef                          { get; private set; }
    public FieldInfo_GetFieldFromHandle              : DN.MethodDef                          { get; private set; }
    public FieldInfo_GetFieldFromHandle2             : DN.MethodDef                          { get; private set; }
    public String_opEquality                         : DN.MethodDef                          { get; private set; }
    public String_opInequality                       : DN.MethodDef                          { get; private set; }
    public Decimal_opEquality                        : DN.MethodDef                          { get; private set; }
    public String_Concat                             : DN.MethodDef                          { get; private set; }
    public ObjectCtor                                : DN.MethodDef                          { get; private set; }
    public Delegate_Combine                          : DN.MethodDef                          { get; private set; }
    public Delegate_Remove                           : DN.MethodDef                          { get; private set; }

    public mutable ExtensionAttribute                        : DN.TypeDef;
    public mutable ExtensionAttributeAssembly                : string;
    public mutable SQ_ExtensionAttribute                     : DN.TypeDef;
    public mutable SQ_ExtensionAttributeAssembly             : string;

    public NemerleAttribute : DN.TypeDef
    {
      mutable nemerle_attribute : DN.TypeDef;

      get
      {
        when (nemerle_attribute == null)
          InternalType.InitNemerleTypes();

        nemerle_attribute
      }

      internal set { nemerle_attribute = value; }
    }

    public NullMatchException                : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.NullMatchException_tc) } }
    public ContainsMacroAttribute            : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.ContainsMacroAttribute_tc) } }
    public VariantAttribute                  : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.VariantAttribute_tc) } }
    public VariantOptionAttribute            : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.VariantOptionAttribute_tc) } }
    public VolatileModifier                  : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.VolatileModifier_tc) } }
    public ImmutableAttribute                : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.ImmutableAttribute_tc) } }
    public ConstantVariantOptionAttribute    : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.ConstantVariantOptionAttribute_tc) } }
    public TypeAliasAttribute                : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.TypeAliasAttribute_tc) } }
    public ExtensionPatternEncodingAttribute : DN.TypeDef { get { SystemHelpers.GetSystemType(InternalType.ExtensionPatternEncodingAttribute_tc) } }

    /// Reflects a type using NamespaceTree
    public Reflect(type_name : string) : DN.TypeDef
    {
      match (Manager.NameTree.LookupSystemTypeOpt(type_name))
      {
        | Some(t) => t
        | _ => Util.ice ("cannot reflect `" + type_name + "'")
      }
    }

    internal Init() : void
    {
      Array                                     = Reflect("System.Array");
      Boolean                                   = Reflect("System.Boolean");
      Byte                                      = Reflect("System.Byte");
      Char                                      = Reflect("System.Char");
      Decimal                                   = Reflect("System.Decimal");
      Double                                    = Reflect("System.Double");
      Enum                                      = Reflect("System.Enum");
      FlagsAttribute                            = Reflect("System.FlagsAttribute");
      Int16                                     = Reflect("System.Int16");
      Int32                                     = Reflect("System.Int32");
      Int64                                     = Reflect("System.Int64");
      IntPtr                                    = Reflect("System.IntPtr");
      Delegate                                  = Reflect("System.Delegate");
      MulticastDelegate                         = Reflect("System.MulticastDelegate");
      Object                                    = Reflect("System.Object");
      Reflection_FieldInfo                      = Reflect("System.Reflection.FieldInfo");
      Reflection_PropertyInfo                   = Reflect("System.Reflection.PropertyInfo");
      Reflection_AssemblyConfigurationAttribute = Reflect("System.Reflection.AssemblyConfigurationAttribute");
      Runtime_CompilerServices_IsVolatile       = Reflect("System.Runtime.CompilerServices.IsVolatile");
      DebuggableAttribute                       = Reflect("System.Diagnostics.DebuggableAttribute");
      DebuggableAttribute_DebuggingModes        = Reflect("System.Diagnostics.DebuggableAttribute.DebuggingModes");
      CompilationRelaxationsAttribute           = Reflect("System.Runtime.CompilerServices.CompilationRelaxationsAttribute");
      SByte                                     = Reflect("System.SByte");
      Single                                    = Reflect("System.Single");
      String                                    = Reflect("System.String");
      SystemTypeCache.Type                      = Reflect("System.Type");
      UInt16                                    = Reflect("System.UInt16");
      UInt32                                    = Reflect("System.UInt32");
      UInt64                                    = Reflect("System.UInt64");
      Void                                      = Reflect("System.Void");
      ParamArrayAttribute                       = Reflect("System.ParamArrayAttribute");
      Reflection_DefaultMemberAttribute         = Reflect("System.Reflection.DefaultMemberAttribute");

      {
        Decimal_ctors = Hashtable ();

        foreach (decimal_ctor : DN.MethodDef when decimal_ctor.IsConstructor in SystemTypeCache.Decimal.Methods)
        {
          def parameters = decimal_ctor.Parameters;
          def ctor_name = $<#..$(parameters; ", "; p => p.Type.ReflectionName)#>;
          Decimal_ctors [ctor_name] = decimal_ctor;
        }

        assert(Decimal_ctors.Count >=  7)
      }

      def methodBase          = Reflect("System.Reflection.MethodBase");
      def fieldInfo           = Reflect("System.Reflection.FieldInfo");
      def runtimeTypeHandle   = Reflect("System.RuntimeTypeHandle");
      def runtimeMethodHandle = Reflect("System.RuntimeMethodHandle");
      def runtimeFieldHandle  = Reflect("System.RuntimeFieldHandle");
      
      RuntimeHelpers_get_OffsetToStringData = Reflect("System.Runtime.CompilerServices.RuntimeHelpers").GetMethod("get_OffsetToStringData");
      Type_GetTypeFromHandle                = SystemTypeCache.Type.GetMethod ("GetTypeFromHandle");
      MethodBase_GetMethodFromHandle        = methodBase.GetMethod("GetMethodFromHandle", runtimeMethodHandle);
      MethodBase_GetMethodFromHandle2       = methodBase.GetMethod("GetMethodFromHandle", runtimeMethodHandle, runtimeTypeHandle);
      FieldInfo_GetFieldFromHandle          = fieldInfo.GetMethod("GetFieldFromHandle",  runtimeFieldHandle);
      FieldInfo_GetFieldFromHandle2         = fieldInfo.GetMethod("GetFieldFromHandle",  runtimeFieldHandle, runtimeTypeHandle);
      String_opEquality                     = SystemTypeCache.String.GetMethod("op_Equality");
      String_opInequality                   = SystemTypeCache.String.GetMethod("op_Inequality");
      String_Concat                         = String.GetMethod("Concat", array [String, String]);
      Decimal_opEquality                    = SystemTypeCache.Decimal.GetMethod("op_Equality");
      ObjectCtor                            = Object.GetMethod(".ctor");
      Delegate_Combine                      = Delegate.GetMethod("Combine", array [Delegate, Delegate]);
      Delegate_Remove                       = Delegate.GetMethod("Remove", array [Delegate, Delegate]);
      assert(ObjectCtor != null);
    }
  }
} // end ns
