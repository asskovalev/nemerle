using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  internal class PointerTypeInfo : TypeInfo
  {
    public this(node : NamespaceTree.Node, manager : ManagerClass)
    {
      base(node, manager, string.Join(".", node.FullName));
      Name         = node.PartName;
      attributes   = NemerleModifiers.Public %| NemerleModifiers.Sealed;
      def typeParm = StaticTypeVar(manager, "T");
      typeParm.SetConstraints(DN.GenericParamAttributes.NotNullableValueTypeConstraint, []);
      typarms      = [typeParm];
    }

    public override Name : string { get; }

    public override BaseType : TypeInfo { get { InternalType.Object_tc } }

    public override IsPointer: bool { get { true } }

    public override IsValueType : bool { get { true } }

    public override IsStatic : bool { get { false } }

    public override IsEnum : bool { get { false } }

    public override IsDelegate : bool { get { false } }

    public override IsInterface : bool { get { false } }

    public override Accessibility : Accessibility { get { Accessibility.Public } }

    public override IsExternallyAccessible : bool { get { true } }

    public override Location : Location { get { Location.NoLocation } }

    public override GlobalEnv : GlobalEnv { get { Manager.CoreEnv } }

    public override AttributeTargets : AttributeTargets { get { AttributeTargets.All } }

    public override DeclaringType : TypeInfo { get { null } }

    public override UnderlyingType : FixedType { get { assert(false) } }

    public override GetTydecl() : TypeDeclaration { TypeDeclaration.Class() }

    public override GetConstantObject() : IField { null }

    public override SuperClass() : option[TypeInfo] { Some(BaseType) }

    public override GetDirectSuperTypes() : list[FixedType.Class] { [InternalType.Object] }

    public override HasAttribute(_attribute : TypeInfo) : bool { false }

    public override IsCustomAttributeDefined(_attributeFullName : string) : bool { false }

    public override CanAccess(_source : TypeInfo) : bool { true }

    public override GetModifiers() : AttributesAndModifiers { AttributesAndModifiers(Attributes, []) }

    public override GetFields(_bindingAttr : System.Reflection.BindingFlags) : list[IField] { [] }

    public override GetConstructors(_bindingAttr : System.Reflection.BindingFlags) : list[IMethod] { [] }
  }
}
