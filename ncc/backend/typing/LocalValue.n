using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using SC = System.Collections;
using SCS = System.Collections.Specialized;
using SRE = System.Reflection.Emit;

namespace Nemerle.Compiler
{
  public partial class LocalValue : TypedBase, System.IComparable[LocalValue], System.IEquatable[LocalValue]
  {
    variant ILKind
    {
      | None
      | Parm { slot : int; }
      | ByRefParm { slot : int; }
      | Local { builder : SRE.LocalBuilder; }
    }

    mutable _ilKind : ILKind = ILKind.None();

    CheckIL() : void
    {
      when (postponed_declaration)
      {
        postponed_declaration = false;
        when (declare != null)
          declare();
      }
      assert(!(_ilKind is ILKind.None));
      Util.cassert(!(_ilKind is ILKind.None), $"_ilKind is none for $this (id=$id)");
    }

    internal IsByRefParm : bool
    {
      get
      {
        CheckIL();
        _ilKind is ILKind.ByRefParm
      }
    }
    
    internal IsParm : bool
    {
      get
      {
        CheckIL();
        match (_ilKind)
        {
          | Parm
          | ByRefParm => true
          | Local => false
          | None => Util.ice()
        }
      }
    }

    internal LocalSlot : SRE.LocalBuilder
    {
      get
      {
        CheckIL();

        match (_ilKind)
        {
          | Local(slot) => slot
          | _ => Util.ice()
        }
      }
      set
      {
        unless (_ilKind is ILKind.None)
        {
          assert(true);
        }
        Util.cassert(_ilKind is ILKind.None);
        _ilKind = ILKind.Local(value);
      }
    }

    internal ParmIndex : int
    {
      get
      {
        CheckIL();
        match (_ilKind)
        {
          | Parm(id)
          | ByRefParm(id) => id
          | _ => Util.ice()
        }
      }
    }

    internal SetParmIndex(idx : int, is_by_ref : bool) : void
    {
      Util.cassert(_ilKind is ILKind.None);
      _ilKind = 
        if (is_by_ref)
          ILKind.ByRefParm(idx);
        else
          ILKind.Parm(idx)
    }
  } // class
} // namespace
