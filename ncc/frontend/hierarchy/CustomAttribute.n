/*
 * Copyright (c) 2004-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using System.IO;
using SY = System;

using PT = Nemerle.Compiler.Parsetree;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SRI = System.Runtime.InteropServices;
using SS = System.Security;
using SSP = System.Security.Permissions;
using SCG = System.Collections.Generic;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  public partial class TypesManager
  {
    static read_keypair (loc : Location, name : string) : SR.StrongNameKeyPair
    {
      try {
        SR.StrongNameKeyPair(File.Open(name, FileMode.Open, FileAccess.Read))
      }
      catch {
        | _ is DirectoryNotFoundException =>
          Message.FatalError (loc, "could not find directory of `" + name + "' with key pair for assembly")
        | _ is FileNotFoundException =>
          Message.FatalError (loc, "could not find file `" + name + "' with key pair for assembly")
      }
    }

    public AddAssemblyAttribute ([NotNull] env : GlobalEnv, [NotNull] attr : Parsetree.PExpr) : void {
      def add (phase) {
        def suff = AttributeMacroExpansion.Suffix (MacroTargets.Assembly, phase);
        match (MacroRegistry.lookup_macro (env, attr, suff)) {
          | None => false
          | Some =>
              def expansion = AssemblyAttributeMacroExpansion (MacroTargets.Assembly, phase,
                                                               attr, [], null, null, env);
              AddMacroExpansion (expansion);
              true
        }
      }
      def b1 = add (MacroPhase.BeforeInheritance);
      def b2 = add (MacroPhase.BeforeTypedMembers);
      def b3 = add (MacroPhase.WithTypedMembers);
      if (b1 || b2 || b3)
        ()
      else
        assembly_attributes.Add (env, attr);
    }

    internal GetInformationalAssemblyAttributes() : list[SRE.CustomAttributeBuilder]
    {
      def attributeList = SCG.List.[SRE.CustomAttributeBuilder]();
      def typeList = SCG.List.[System.Type]();
      def ctorParameters = array[typeof(string)];

      mutable hitFileVersion = false;
      mutable hitAssemblyVersion = false;
      mutable assemblyVersionString;
      mutable location;
      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute(env, attr);

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }

        def addAttributeForType(type)
        {
          if(typeList.Contains(type))
          {
            Message.Warning (attr.Location, "given attribute is occurred more than once")
          }
          else
          {		 
            typeList.Add(type);
          }

        }
        if (tc.Equals (InternalType.AssemblyCompanyAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyCompanyAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyCopyrightAttribute_tc))
        {
           addAttributeForType(typeof(SR.AssemblyCopyrightAttribute)) 
        }
        else if (tc.Equals (InternalType.AssemblyDescriptionAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyDescriptionAttribute)) 
        }
        else 
        if (tc.Equals (InternalType.AssemblyFileVersionAttribute_tc))
        {
           hitFileVersion = true;
           addAttributeForType(typeof(SR.AssemblyFileVersionAttribute))
        }
        else
        if (tc.Equals (InternalType.AssemblyProductAttribute_tc))
        {
           addAttributeForType(typeof(SR.AssemblyProductAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyTitleAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyTitleAttribute))
        }
        else 
        if (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
        {         
          hitAssemblyVersion = true;
          assemblyVersionString = take_string(parms);  
          location = attr.Location;
          //an.Version = ParseVersion(take_string(parms), attr.Location);
        }
        else
        {

        }

      }
      
      when(!hitFileVersion && hitAssemblyVersion)
      {
        def type =  typeof(SR.AssemblyFileVersionAttribute);
        def ctor = type.GetConstructor(ctorParameters);
        def version = ParseVersion(assemblyVersionString, location).ToString();
        def ctorArgs = array[version];
        SRE.CustomAttributeBuilder(ctor, ctorArgs) |> attributeList.Add;
        
      }
      attributeList.NToList();

    }

    ParseVersion  (versionString : string, location : Location) : SY.Version
    {
      _ = this;
        // spec for parsing version is quite interesting
          // http://msdn.microsoft.com/library/en-us/cpref/html/frlrfsystemreflectionassemblyversionattributeclassctortopic.asp
      def ver = NString.Split (versionString, array ['.']);

      mutable version_object = null;
      try
      {
        def verint = ver.Map(x => if (x == "*") -1 else (SY.UInt16.Parse(x) :> int));

        version_object =
                          match (verint) {
                            | [x1] => SY.Version (x1.ToString ())
                            | [x1, x2] => SY.Version (x1, x2)
                            | [x1, x2, -1] =>
                                def spanBuild = SY.DateTime.Now.Subtract (SY.DateTime (2000, 1, 1));
                                def spanRevision = SY.DateTime.Now.Subtract (SY.DateTime.Today);
                                SY.Version (x1, x2, spanBuild.Days, (spanRevision.Ticks / 20000000) :> int)
                            | [x1, x2, x3] => SY.Version (x1, x2, x3)
                            | [x1, x2, x3, -1] =>
                                def spanRevision = SY.DateTime.Now.Subtract (SY.DateTime.Today);
                                SY.Version (x1, x2, x3, (spanRevision.Ticks / 20000000) :> int)
                            | [x1, x2, x3, x4] => SY.Version (x1, x2, x3, x4)
                            | _ =>
                                Message.Error (location, "invalid format of version attribute");
                                SY.Version ();
                          }
      }
      catch {
        | _ is SY.OverflowException =>
          Message.Error (location, "wrong format of version attribute");
          version_object = SY.Version ();
      }
      version_object;
    }
    internal CreateAssemblyName () : SR.AssemblyName
    {
      /* create an assembly name and set its properties according to defined
         global assembly attributes */
      def an = SR.AssemblyName ();
      an.CodeBase = string.Concat("file:///", Directory.GetCurrentDirectory());

      when (Manager.Options.StrongAssemblyKeyName != null) {
        an.KeyPair = read_keypair (Location.Default, Manager.Options.StrongAssemblyKeyName);
      }

      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute (env, attr);

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }
        if (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
        {         
          an.Version = ParseVersion(take_string(parms), attr.Location);
        }
        else if (tc.Equals (InternalType.AssemblyKeyFileAttribute_tc))
             {
               def key = take_string (parms);
               if (an.KeyPair != null)
                 Message.Warning (attr.Location, "AssemblyKeyFile attribute will be ignored, as key file was already specified")
               else
                 when (key != "") an.KeyPair = read_keypair (attr.Location, key);
             }
             else when (tc.Equals (InternalType.AssemblyCultureAttribute_tc))
                    an.CultureInfo = SY.Globalization.CultureInfo (take_string (parms));
      }
      an
    }
  }

  public partial class AttributesAndModifiers : Located
  {
    public IsCustomAttributeDefined([NotNull] attributeFullName : string, [NotNull] env : GlobalEnv) : bool
    {
      FindAttribute(env.Manager.LookupTypeInfo(attributeFullName), env).IsSome
    }

    /// Finds first attribute of specified type
    public FindAttribute ([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : option [PT.PExpr]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some(_))
          Nemerle.Imperative.Return(Some(expr));
      None()
    }

    /// Finds attribute of specified type
    public FindAttributeWithArgs([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : option[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          Nemerle.Imperative.Return(Some(expr, args));
      None()
    }

    /// Finds all attributes of specified type
    public FindAttributesWithArgs([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : list[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          result ::= (expr, args);
      result
    }

    public AttributeTypes([NotNull] env : GlobalEnv) : list[TypeInfo]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr) is Some((ti, _)))
          result ::= ti;
      result
    }

    internal SaveCustomAttributes([NotNull] ti : TypeBuilder, adder : SY.AttributeTargets * SRE.CustomAttributeBuilder * bool -> string) : void
    {
      foreach (expr in custom_attrs)
      {
        try
        {
          def error = adder (ti.Manager.AttributeCompiler.CompileAttribute(ti.GlobalEnv, ti, expr));
          when (error != null)
            Message.Error (expr.Location, $"custom attribute $expr is not valid on " + error);
        }
        catch { | _ is Recovery => () }
      }

      foreach ((suff, expr) in macro_attrs)
      {
        try
        {
          def (m, parms) =
            match (MacroRegistry.lookup_macro (ti.GlobalEnv, expr, suff))
            {
              | Some ((_, m, parms)) => (m, parms)
              | _ => Util.ice ("macro is not a macro?" +
                               PrettyPrint.SprintExpr (None (), expr))
            };

          // check if macro needs to be saved in metadata
          // it should be done only if it will be inherited in some derived class
          def inherited = m.IsInherited && !ti.IsSealed;

          when (inherited) {
            def concatenated = parms.ToString ("@");
            def name = m.GetNamespace () + "." + m.GetName ();
            def serialized = <[
              Nemerle.Internal.MacroAttribute ($(name : string),
                                              0,
                                              $(concatenated : string))
            ]>;
            def error = adder (ti.Manager.AttributeCompiler.CompileAttribute(ti.GlobalEnv, ti, serialized));
            when (error != null)
              Message.Error ($"macro attribute $name is not valid on " + error);
          }
        } catch { | _ is Recovery => () }
      }
    }
  }
}


