using System.Diagnostics;
using System.Globalization;
using System.Math;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  [DebuggerDisplay(<#{File + ":" + Line + ":" + Column + ":" + EndLine + ":" + EndColumn + (IsGeneratedOrEmpty ? "-gen" : "")}#>)]
  public struct Location : System.IComparable[Location], System.IEquatable[Location]
  {
    static this ()
    {
      def index = AddFile(""); // fake file with index 0
      assert(index == 0);
    }

    private static _isFileInIndentationSyntax : SCG.List[bool]         = SCG.List();
    private static _files                     : SCG.List[string]       = SCG.List();
    private static _filesMap                  : Hashtable[string, int] = Hashtable();
    
    public static GetIndexArrayLength() : int { _files.Count }
    
    public static SetIndentationSyntaxForFile(fileIndex : int, isIndntSyntax : bool) : void
    {
      lock (_isFileInIndentationSyntax)
        _isFileInIndentationSyntax[fileIndex] = isIndntSyntax;
    }

    public this (fileIndex : int, line : int, col : int)
    {
      this (fileIndex, line, col, line, col);
    }

    public this (fileIndex : int, begin : TextPoint)
    {
      this (fileIndex, begin.Line, begin.Column, begin.Line, begin.Column);
    }

    public this (fileName : string, line : int, col : int, endLine : int, endCol : int)
    {
      this (GetFileIndex (fileName), line, col, endLine, endCol);
    }

    public this (fileName : string, begin : TextPoint, end : TextPoint)
    {
      this (fileName, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (fileIndex : int, line : int, col : int, endLine : int, endCol : int)
    {
      assert(fileIndex >= 0);

      _fileIndex = fileIndex;
      _line      = line;
      _column    = col;
      _endLine   = endLine;
      _endColumn = endCol;
    }

    public this (fileIndex : int, begin : TextPoint, end : TextPoint)
    {
      this (fileIndex, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (source : Location, line : int, col : int, endLine : int, endCol : int)
    {
      _fileIndex = source._fileIndex;
      _line      = line;
      _column    = col;
      _endLine   = endLine;
      _endColumn = endCol;
    }

    public this (source : Location, begin : TextPoint, end : TextPoint)
    {
      this (source, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (source : Location, line : int, col : int) { this (source, line, col, line, col) }
    
    public static Default : Location = Location (0, 0, 0, 0, 0);

    public static @== (x : Location, y : Location) : bool { x.Equals (y) }
    public static @!= (x : Location, y : Location) : bool { !x.Equals (y) }
   
    /// This operator is not commutative!
    public static @+ (x : Location, y : Location) : Location
    {
      def xFileIndex = x.FileIndex;
      if (xFileIndex == y.FileIndex && x.IsGenerated == y.IsGenerated)
      {
        //def genmask = if (x.IsGenerated) GeneratedMask else 0; // VladD2: What for this need? IsGenerated an equal!
        Location(
          x._fileIndex | y._fileIndex, // marge masks // | genmask,
          x.Line,
          x.Column,
          if (y.EndLine > x.EndLine) y.EndLine else x.EndLine,
          if (x.EndLine < y.EndLine)          y.EndColumn 
          else if (x.EndLine > y.EndLine)     x.EndColumn 
          else if (x.EndColumn < y.EndColumn) y.EndColumn 
          else                                x.EndColumn);
      }
      else if (y == Default || y.IsGenerated)
        x
      else
        y
    }    
    
    //public AsParsed () : Location 
    //{ def copy = this; copy._fileIndex &= ~GeneratedMask; copy }
    //public AsParsed () : Location 
    //{ def copy = this; copy._fileIndex &= ~GeneratedMask; copy }

    public AsGenerated () : Location
    { AsGenerated (_fileIndex, _line, _column, _endLine, _endColumn) }

    public static AsGenerated (fileIndex : int, line : int, col : int) : Location
    { AsGenerated (fileIndex, line, col, line, col); }    

    public static AsGenerated (fileName : string, line : int, col : int, endLine : int, endCol : int) : Location
    { AsGenerated (GetFileIndex (fileName), line, col, endLine, endCol); }

    public static AsGenerated (fileIndex : int, line : int, col : int, endLine : int, endCol : int) : Location
    { Location (fileIndex | GeneratedMask, line, col, endLine, endCol) }

    public IsGenerated : bool { get { _fileIndex %&& GeneratedMask } }
    public MarkAsGenerated() : void { _fileIndex |= GeneratedMask; }

    public MarkAsFakeSorceAvailable() : void { assert(_line > 0 && FileIndex > 0); _fileIndex |= FakeSourceMask; }
    public AsFakeSorceAvailable() : Location
    {
      Location(_fileIndex | FakeSourceMask, _line, _column, _endLine, _endColumn)
    }

    public IsGeneratedOrEmpty : bool { get { IsGenerated || _line == 0 } }

    public IsSourceAvailable : bool
    {
      get
      {
        def mask = _fileIndex & FakeSourceMask;
        (mask == 0 || mask == FakeSourceMask) && FileIndex > 0 && Line > 0
      }
    }

    public IsSourceFileAvailable : bool { get { FileIndex != 0 && Line > 0 && System.IO.File.Exists(File) } }

    public static GetFileName(index : int) : string
    {
      _files[index];
    }

    /** Adds new filename to locations index. If filename in already in
        store, an error message is outputted.
     */
    public static AddFile (name : string) : int
    {
      when (_filesMap.Contains (name))
        Message.Error ($"file '$name' occured twice on the list to compile");

      GetFileIndex (name)
    }
    
    /** Removes a filename from the location index */
    public static RemoveFile (name : string) : void
    {
      unless ((_filesMap : SCG.Dictionary[string, int]).Remove (name))
          throw System.ArgumentException ($"file '$name' do not exist");
    }

    public static IsFileInIndentationSyntax(fileIndex : int) : bool
    {
      _isFileInIndentationSyntax[fileIndex]
    }

    /** Gets index of given filename in locations store. If one doesn't exist
        it is being added and new index is returned.
     */
    public static GetFileIndex ([NotNull] name : string) : int
    {
      mutable index;

      if (_filesMap.TryGetValue(name, out index))
        index
      else lock (_filesMap)
      {
        if (_filesMap.TryGetValue(name, out index))
          index
        else
        {
          index = _files.Count;
          _files.Add(name);
          _isFileInIndentationSyntax.Add(false);
          _filesMap[name] = index;
          index
        }
      }
    }

    static AllMasks       = 0xF000_0000;
    static FileIndexMask  = 0x0FFF_FFFF;
    static FakeSourceMask = 0x2000_0000 | 0x4000_0000; // include GeneratedMask!
    static GeneratedMask  = 0x4000_0000;

    public FileIndex : int { [DebuggerNonUserCode] get { _fileIndex & FileIndexMask } }
    
               mutable _fileIndex  : int;
    [Accessor]         _line       : int;
                       _column     : int;
    public             Column      : int    { get { _column } }

    [Accessor]          _endLine   : int;
                        _endColumn : int;
    public              EndColumn  : int    { get { _endColumn } }

    public              Begin      : TextPoint { get { TextPoint(Line, Column) } }
    public              End        : TextPoint { get { TextPoint(EndLine, EndColumn) } }

    public File : string
    {
      [Nemerle.Assertions.Ensures (value != null)]
      get { _files[FileIndex]; }
    }

    public CompareTo(x : Location) : int
    {
      if (FileIndex == x.FileIndex) // here we ignore generated / parsed bit
        if (Line == x.Line)
          Column - x.Column
        else
          Line - x.Line
      else
        File.CompareTo (x.File)
    }

    public override ToString () : string
    {
      if (this == Default)
        ""
      else
        if (EndLine != 0)
          $"$File:$Line:$Column:$EndLine:$EndColumn: "
        else if (Line != 0)
          $"$File:$Line:$Column: "
        else
          File + ": "
    }

    [Nemerle.OverrideObjectEquals]
    public Equals (other : Location) : bool
      implements System.IEquatable[Location].Equals
    {
      FileIndex == other.FileIndex // ignore generated / parsed bit
      && _line == other._line       && _column == other._column
      && _endLine == other._endLine && _endColumn == other._endColumn
    }

    public override GetHashCode() : int
    {
      FileIndex ^ _line ^ _column ^ _endLine ^ _endColumn
    }

    public FromStart () : Location
    { Location(_fileIndex, Line, Column, Line, Column) }

    public FromStartAsGenerated() : Location
    { Location(_fileIndex | GeneratedMask, Line, Column, Line, Column) }

    public FromEnd () : Location
    { Location(_fileIndex, EndLine, EndColumn, EndLine, EndColumn) }

    public FromEndAsGenerated() : Location
    { Location(_fileIndex | GeneratedMask, EndLine, EndColumn, EndLine, EndColumn) }

    public Contains(point : TextPoint) : bool { Contains(point.Line, point.Column) }

    public Contains(testLine : int, testCol : int) : bool
    {
      if (testLine >= this.Line && testLine <= this.EndLine)
      {
        if (testLine == this.Line)
        {
          if (testLine == this.EndLine)
            testCol >= this.Column && testCol <= this.EndColumn
          else
            testCol >= this.Column
        }
        else if (testLine == this.EndLine)
          testCol <= this.EndColumn
        else
          true
      }
      else
        false
    }

    /// Returns whether the first location is strictly inside the second
    public StrictlyContains(second : Location) : bool
    {
      Contains(second) && this != second
    }

    /// Returns whether the first location is (not strictly) inside the second
    public Contains(second : Location) : bool
    {
      if (FileIndex == second.FileIndex)
        Contains(second.Line, second.Column) && Contains(second.EndLine, second.EndColumn)
      else
        false
    }

    /// Returns whether the first location is (not strictly) 
    /// before the second (the left of first is to the left of second)
    public StartsBefore(second: Location) : bool
    {
      if (Line < second.Line)
        true
      else if (Line > second.Line)
        false
      else if (Column < second.Column)
        true
      else if (Column > second.Column)
        false
      else
        true
    }

    public Contains(testFileIndex : int, 
      testLine : int, testCol : int) : bool
    {
      if (FileIndex == testFileIndex)
        Contains(testLine, testCol)
      else
        false
    }

    /// The 'lst' must be ordered. This function test only first and last elements.
    public static EnclosingLocation(this lst : list[Location]) : Location
    {
      Debug.Assert(lst.IsOrdered((x, y) => x.CompareTo(y) > 0));
      Debug.Assert(!lst.IsEmpty);
      
      lst.Head + lst.Last
    }

    public static EnclosingLocation[T](this lst : list[T]) : Location
      where T: Located
    {
      Debug.Assert(lst.IsOrdered((x, y) => x.Location.CompareTo(y.Location) > 0));
      Debug.Assert(!lst.IsEmpty);
      
      lst.Head.Location + lst.Last.Location
    }

    public TrimStart(second : Location) : Location
    {
      TrimStart(second, true)
    }

    public TrimStart(l2 : Location, adjustBegin : bool) : Location
    {
      mutable lbeg;
      mutable cbeg;

      def adj = if (adjustBegin) 1 else 0;

      if      (Line < l2.EndLine) { lbeg = l2.EndLine; cbeg = l2.EndColumn + adj; }
      else if (Line > l2.EndLine) { lbeg = Line;    cbeg = Column; }
      else
      {
        lbeg = Line;
        cbeg = if (Column < l2.EndColumn) l2.EndColumn + adj else Column;
      }

      Location(this, lbeg, cbeg, EndLine, EndColumn)
    }

    public TrimEnd(l2 : Location) : Location
    {
      mutable lend;
      mutable cend;

      if      (EndLine > l2.Line) { lend = l2.Line;    cend = l2.Column - 1; }
      else if (EndLine < l2.Line) { lend = EndLine; cend = l2.EndColumn; }
      else
      {
        lend = EndLine;
        cend = if (EndColumn > l2.Column) l2.Column else EndColumn;
      }

      Location(this, Line, Column, lend, cend)
    }

    public Trim(l2 : Location, line : int, col : int) : Location
    {
      if (line < l2.Line || line == l2.Line && col < l2.Column)
        TrimEnd(l2)
      else if (line > l2.EndLine || line == l2.EndLine && col > l2.EndColumn)
        TrimStart(l2, true)
      else
        this
    }

    public Combine(l2 : Location) : Location
    {
      if (IsEmpty)
        l2
      else if (l2.IsEmpty)
        this
      else
      {
        mutable lbeg;
        mutable cbeg;

        if      (Line < l2.Line) { lbeg = Line; cbeg = Column; }
        else if (Line > l2.Line) { lbeg = l2.Line; cbeg = l2.Column; }
        else
        {
          lbeg = Line;
          cbeg = if (Column < l2.Column) Column else l2.Column;
        }

        mutable lend;
        mutable cend;

        if      (EndLine > l2.EndLine) { lend = EndLine; cend = EndColumn; }
        else if (EndLine < l2.EndLine) { lend = l2.EndLine; cend = l2.EndColumn; }
        else
        {
          lend = EndLine;
          cend = if (EndColumn > l2.EndColumn) EndColumn else l2.EndColumn;
        }

        Location(this, lbeg, cbeg, lend, cend)
      }
    }

    public Combine(l2 : Located) : Location
    {
      Combine(l2.Location)
    }

    public IsIntersect(l2 : Location) : bool
      requires FileIndex == l2.FileIndex || FileIndex == 0 || l2.FileIndex == 0
    {
      !Intersect(l2).IsEmpty
    }

    public Intersect(l2 : Location) : Location
      requires FileIndex == l2.FileIndex || FileIndex == 0 || l2.FileIndex == 0
    {
      mutable lbeg;
      mutable cbeg;

      if      (Line < l2.Line) { lbeg = l2.Line; cbeg = l2.Column; }
      else if (Line > l2.Line) { lbeg = Line;    cbeg = Column; }
      else
      {
        lbeg = Line;
        cbeg = if (Column < l2.Column) l2.Column else Column;
      }

      mutable lend;
      mutable cend;

      if      (EndLine > l2.EndLine) { lend = l2.EndLine; cend = l2.EndColumn; }
      else if (EndLine < l2.EndLine) { lend = EndLine;    cend = EndColumn; }
      else
      {
        lend = EndLine;
        cend = if (EndColumn > l2.EndColumn) l2.EndColumn else EndColumn;
      }

      Location(this, lbeg, cbeg, lend, cend)
    }

    public IsEqualExcludingFile(l2 : Location) : bool
    {
      Line   == l2.Line   && EndLine   == l2.EndLine &&
      Column == l2.Column && EndColumn == l2.EndColumn
    }

    public IsEmpty : bool
    {
      get { EndLine == 0 || EndLine < Line || (EndLine == Line && EndColumn <= Column) }
    }

    /// True if second contain inside this location and them not equal.
    public IsNestedIn(second : Location) : bool
    {
      second.StrictlyContains(this)
    }

    public static IndexOfMostNested2[T](
      this seq : SCG.IList[T], 
      convert : System.Converter[T, Location],
      line : int,
      col : int
    )
      : int
    {
      IndexOfMostNested(seq, convert(_), line, col)
    }

    /// Return index of object in seq which conain most nested Lication.
    public static IndexOfMostNested[T](
      this seq : SCG.IList[T], 
      convert : T -> Location,
      line : int,
      col : int
    )
      : int
    {
      def (_, resIndex, _) = seq.Fold((0, -1, Location.Default), 
        fun(elem, (i, resIndex, curr))
        {
          def loc = convert(elem);
          if (loc.Contains(line, col) && (resIndex < 0 || loc.IsNestedIn(curr)))
            (i + 1, i,        loc)
          else
            (i + 1, resIndex, curr);
        });

      resIndex
    }
  }
} // Nemerle.Compiler
