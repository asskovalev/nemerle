using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Assertions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Compiler.Typedtree
{
  public variant TExpr : TypedBase
  {
    // always valid
    | StaticRef             { from : FixedType.Class; mem : IMember; type_parms : list [TypeVar]; }
    | LocalRef              { decl : LocalValue; }
    | ImplicitValueTypeCtor
    | FieldMember           { obj : TExpr; fld : IField; }
    | MethodRef             { obj : TExpr; meth : IMethod; type_parms : list [TypeVar]; notvirtual : bool; }
    | Call                  { mutable func : TExpr; mutable parms : list[Param]; mutable is_tail : bool;
                              public override SetParsedObject([NotNull] related : ParsedBase) : void
                              {
                                match (related)
                                {
                                  | PExpr.Call(pfunc, _) => func.SetParsedObject(pfunc)
                                  | _ => ()
                                }
                                
                                base.SetParsedObject(related)
                              }
                            }
    | Assign                { target : TExpr; source : TExpr; }
    | DefValIn              { name : LocalValue; val : TExpr; mutable body : TExpr; }
    | Throw                 { exn : TExpr; }
    | TryFinally            { body : TExpr; handler : TExpr; }
    | Try                   { body : TExpr; mutable cases : list [TryCase]; }
    | Literal               { val : Nemerle.Compiler.Literal; }
    | This
    | Base                  { base_ctor : IMethod; }
    | TypeConversion        { mutable expr : TExpr; target_type : TypeVar; kind : ConversionKind;
                              mutable target_type_location : Location;

                              this (loc : Location, tv : TypeVar, expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (loc, tv, expr, target_type, kind, Location.Default);
                              }

                              this (tv : TypeVar, expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (tv, expr, target_type, kind, Location.Default);
                              }

                              this (expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (expr, target_type, kind, Location.Default);
                              }

                            }
    | Sequence              { mutable e1 : TExpr; mutable e2 : TExpr; }
    | Tuple                 { args : list [TExpr]; }
    | Array                 { args : list [TExpr]; dimensions : list [TExpr]; }

    | TypeOf                { target_type : TypeVar; }
    | MethodOf              { from_type : TypeVar; method : IMethod; typars : list [TypeVar] }
    | CtorOf                { @type : TypeVar; method : IMethod; }
    | FieldOf               { @type : TypeVar; field  : IField; }
    | ClosureObjectOf       { varRef : TExpr; }
    | ClosureFieldOf        { varRef : TExpr;
                              public new this(types : InternalTypeClass, varRef : TExpr)
                              {
                                _ty         = types.FieldInfo;
                                this.varRef = varRef;
                              }
                            }

    | ArrayIndexer          { obj : TExpr; args : list [TExpr]; }
    | PointerIndexer        { obj : TExpr; index : TExpr; }
    | TupleIndexer          { obj : TExpr; pos : int; len : int; } // 0-based
    | OpCode                { name : string; }
    | MacroEnvelope         { original : PExpr; the_macro : IMacro; expanded : TExpr; expandedPExpr : PExpr; }

    // invalid after T2
    | PropertyMember        { obj : TExpr; prop : IProperty; }
    | StaticPropertyRef     { from : FixedType.Class; prop : IProperty; }
    | EventMember           { obj : TExpr; ev : IEvent; }
    | StaticEventRef        { from : FixedType.Class; ev : IEvent; }
    | ConstantObjectRef     { from : FixedType.Class; mem : IField; }
    | Block                 { jump_out : LocalValue; body : TExpr; }
    | Delayed               { susp : Typer.DelayedTyping; }

    | Cache                 { desc : CacheDesc; mutable body : TExpr; }
    | CacheRef              { desc : CacheDesc; }

    | Error

    // invalid after T3
    | DefFunctionsIn        { funs : list [TFunHeader]; mutable body : TExpr; }
    | Match                 { expr : TExpr; cases : list [MatchСase]; }
    | SelfTailCall          { func : TExpr; parms : list [Param]; }
    | LocalFunRef           { decl : LocalValue; type_parms : list [TypeVar]; }

    // new CG-related stuff
    | MethodAddress         { from : TypeVar; meth : IMethod; is_virt : bool;
                              type_parms : list [TypeVar]; }
    | MultipleAssign        { assigns : list [LocalValue * TExpr]; }
    // we cannot directly reference Label from Goto, because Walk() would
    // destroy it
    | Label                 { id : int; body : TExpr; }
    // The try_block exact value has meaning only in T4, outside a value
    // different than zero means that we should use [leave] and not [br].
    // This is set in T4, if you create nodes of this type earlier, set
    // it to 1.
    | Goto                  { target : int; mutable try_block : int; }
    | DefaultValue
    | If                    { cond : TExpr; e_then : TExpr; e_else : TExpr;
                              mutable then_debug_loc : Location; mutable else_debug_loc : Location; }
    | HasType               { expr : TExpr; test_ty : FixedType; }
    | Switch                { indexing_expr : TExpr;
                              default : option [TExpr];
                              cases : list [int * TExpr]; }
    | DebugInfo             {
                              expr : TExpr; pexpr : PExpr;

                              public new this(ty : TypeVar, expr : TExpr, pexpr : PExpr)
                              {
                                base(ty);
                                this.expr = expr;
                                this.pexpr = pexpr;
                              }

                              public new this(loc : Location, ty : TypeVar, expr : TExpr, pexpr : PExpr)
                              {
                                assert(loc.IsSourceAvailable);
                                base(loc, ty);
                                this.expr = expr;
                                this.pexpr = pexpr;
                              }

                              public new this(loc : Location, expr : TExpr, pexpr : PExpr)
                              {
                                this(loc, if (expr == null) null else expr.ty, expr, pexpr)
                              }

                              public new this(expr : TExpr, pexpr : PExpr)
                              {
                                def ty1  =  if (expr  == null)
                                              null
                                            else
                                              expr.ty;
                                def loc1 =  if (pexpr == null)
                                              if (expr  == null)  Location.Default
                                              else                expr.Location;
                                            else pexpr.Location;

                                if (loc1.IsSourceAvailable)
                                  base(loc1, ty1);
                                else
                                  base(ty1);
                              }

                              public override SetParsedObject([NotNull] related : ParsedBase) : void
                              {
                                expr.SetParsedObject(related)
                              }
                            }

    // Used only by optimizer (between T3 & T4)
    | Def                   { mutable expr : TExpr; mutable into : TExpr; }
    | Use                   { mutable expr : TExpr; mutable def_of : TExpr.Def; }

    mutable _ty : TypeVar;
    public   ty : TypeVar
    {
      [System.Diagnostics.DebuggerStepThrough]
      get { _ty }
      [System.Diagnostics.DebuggerStepThrough]
      set { _ty = value }
    }

    public Type : TypeVar
    { [System.Diagnostics.DebuggerStepThrough]
      get { if (ty == null) GetType(ManagerClass.Instance) else ty }

      internal set
      {
        match (this)
        {
        | DebugInfo (e, _) when e != null => e.ty = value;
        | _ => ()
        }

        ty = value;
      }
    }

    internal CheckAfterT2 () : void
    {
      _ = Walk(
        fun (e)
        {
          | PropertyMember
          | StaticPropertyRef
          | EventMember
          | StaticEventRef
          | ConstantObjectRef
          | Block
          | Delayed
          | Cache
          | CacheRef
          | Error =>
            Util.ice ($"invalid TExpr after T2: $e");
          | Def
          | Use =>
            Util.ice ($"invalid def/use TExpr after T2: $e");
          | _ => null
        });
    }

    internal CheckAfterT3 () : void
    {
      _ = Walk(
        fun(e)
        {
          | PropertyMember
          | StaticPropertyRef
          | EventMember
          | StaticEventRef
          | ConstantObjectRef
          | Block
          | Delayed
          | Cache
          | CacheRef
          | Error       => Util.ice ($"invalid TExpr after T3(T2): $e");
          | DefFunctionsIn
          | Match
          | SelfTailCall
          | LocalFunRef => Util.ice ($"invalid TExpr after T3: $e");
          | Def
          | Use         => Util.ice ($"invalid def/use TExpr after T3: $e");
          | _           => null
        });
    }

    [FlagAccessor(IsAssigned,     flags = WantSetter | Internal)]
    [FlagAccessor(JumpTarget,     flags = WantSetter | Internal)]
    [FlagAccessor(Visited,        flags = WantSetter | Internal)]
    [FlagAccessor(GenerateTail,   flags = WantSetter | Internal)]
    [FlagAccessor(SkipWriteCheck, flags = WantSetter | Internal)]
    mutable flags : TExprFlags;

    #region Typer4 and ILGenerator stuff
    internal Throws : bool
    {
      get
      {
        Util.cassert (flags %&& TExprFlags.ThrowsComputed, $"throws not computed for $this");
        flags %&& TExprFlags.Throws
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.ThrowsComputed), $"throws already computed for $this");
        if (value)
          flags |= TExprFlags.Throws
        else
          flags &= ~TExprFlags.Throws;

        flags |= TExprFlags.ThrowsComputed;
      }
    }

    internal NeedsEmptyStack : bool
    {
      get
      {
        Util.cassert(flags %&& TExprFlags.NeedsEmptyStackComputed, $"NeedsEmptyStack not computed for $this");
        flags %&& TExprFlags.NeedsEmptyStack
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.NeedsEmptyStackComputed), $"NeedsEmptyStack already computed for $this");
        if (value)
          flags |= TExprFlags.NeedsEmptyStack
        else
          flags &= ~TExprFlags.NeedsEmptyStack;

        flags |= TExprFlags.NeedsEmptyStackComputed;
      }
    }

    internal NeedsConstrained : bool
    {
      get { flags %&& TExprFlags.Constrained  }
      set { when (value) flags |= TExprFlags.Constrained }
    }

    internal IsAddressable : bool
    {
      get
      {
        if (this is TExpr.DebugInfo(expr=expr))
          expr.IsAddressable
        else
        {
          unless (flags %&& TExprFlags.AddressableComputed)
            match (this)
            {
              | StaticRef | LocalRef | ArrayIndexer | PointerIndexer | This => IsAddressable = true;
              | FieldMember (obj, fld) =>
                if (fld.DeclaringType.IsValueType)
                  IsAddressable = obj.IsAddressable;
                else
                  IsAddressable = true;
                
              | _ => IsAddressable = false;
            }

          flags %&& TExprFlags.Addressable
        }
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.AddressableComputed));

        if (value)
          flags |= TExprFlags.Addressable
        else
          flags &= ~TExprFlags.Addressable;

        flags |= TExprFlags.AddressableComputed;
      }
    }

    internal NeedAddress : bool
    {
      get { flags %&& TExprFlags.NeedAddress }
    }

    internal setNeedAddress(from_ctor : bool) : bool
    {
      Util.cassert(!NeedAddress);

      match (this)
      {
        | TExpr.DebugInfo(expr=expr) =>
          if (expr.setNeedAddress(from_ctor)) {
            flags |= TExprFlags.NeedAddress;
            true
          } else {
            false
          }
        | StaticRef
        | LocalRef
        | ArrayIndexer
        | PointerIndexer
        | This =>
          flags |= TExprFlags.NeedAddress;
          true

        | FieldMember (This as obj, fld) with is_mutable = from_ctor || fld.IsMutable
        | FieldMember (obj, fld) with is_mutable = fld.IsMutable || fld.Attributes %&& NemerleModifiers.CompilerMutable =>
          if (is_mutable) {
          //Message.Debug ($"am being assigned $this");
            flags |= TExprFlags.NeedAddress;
            if (fld.DeclaringType.IsValueType && !obj.NeedAddress)
              obj.setNeedAddress (from_ctor);
            else
              true
          }
          else
            false

        | _ => false
      }
    }
    #endregion

    public GetType(manager : ManagerClass) : TypeVar
    {
      when (ty == null)
      {
        TryInitType(manager);

        when (ty == null)
        {
          if (manager.IsIntelliSenseMode)
          {
            System.Diagnostics.Trace.WriteLine($"type is null for $(this.Location), $this");
            ty = manager.Solver.FreshTypeVar ()
          }
          else
            assert(ty != null, $ "still null, $(this.Location), $this");
        }
      }

      ty
    }

    public TryInitType(manager : ManagerClass) : void
    {
      match (this)
      {
        | DebugInfo (e, _) when e != null => ty = e.GetType(manager)
        | _ =>
          when (ty == null)
          {
            def InternalType = manager.InternalType;
            match (this)
            {
              | Throw | Goto | Error       => ty = manager.Solver.FreshTypeVar ()
              | TExpr.Literal (l)          => ty = l.GetInternalType (InternalType)
              | Assign                     => ty = InternalType.Void
              | HasType                    => ty = InternalType.Boolean
              | MacroEnvelope (_, _, e, _) => ty = e.GetType(manager)
              | Cache as c =>
                assert(c.body != null, $ "when trying to determin type, body is null: $this");
                ty = c.body.GetType(manager)

              | TypeOf                     => ty = InternalType.Type
              | CtorOf                     => ty = InternalType.ConstructorInfo
              | MethodOf                   => ty = InternalType.MethodInfo

              | _ => ()
            }
          }
      }
    }

    // Code which change state can't be property!
    public FixedType() : FixedType
    {
      Type.Fix()
    }

    public this () { }

    public this (ty : TypeVar)
    {
      this.ty = ty;
    }

    public this (loc : Location, ty : TypeVar)
    {
      base (loc);
      this.ty = ty;

#if DEBUG
      assert(!(this is DebugInfo) || loc.IsSourceAvailable);
#endif
    }


    public override ToString () : string { PrettyPrint.SprintTyExpr (this) }


    // it does not copy calls
    public Copy() : TExpr
    {
      Walk(do_copy)
    }


    static do_copy (expr : TExpr) : TExpr
    {
      match (expr)
      {
        | This                                  => This()
        | LocalRef(decl)                        => LocalRef(decl)
        | StaticRef(from, mem, parms)           => StaticRef(from, mem, parms)
        | OpCode(o)                             => OpCode(o)
        | TypeOf(t)                             => TypeOf(t)
        | MethodOf(from_type, method, typars)   => MethodOf(from_type, method, typars)
        | CtorOf(ty, m)                         => CtorOf(ty, m)
        | FieldOf(ty, f)                        => FieldOf(ty, f)
        | ClosureObjectOf(x)                    => ClosureObjectOf(x)
        | ClosureFieldOf(x)                     => ClosureFieldOf(x)
        | TExpr.Literal(l)                      => TExpr.Literal(l)
        | Base(ctor)                            => Base(ctor)
        | ImplicitValueTypeCtor                 => ImplicitValueTypeCtor()
        | MethodAddress(from, meth, v, typarms) => MethodAddress(from, meth, v, typarms)
        | Goto(id, t)                           => Goto(id, t)
        | DefaultValue                          => DefaultValue()
        | ConstantObjectRef(from, mem)          => ConstantObjectRef(from, mem)
        | _                                     => null // FIXME
      }
    }


    static walk(f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      def res = Util.locate(expr.Location,
      {
        def res = f(expr);
        def res =
          if (res == null)
            do_walk(f, expr)
          else
            res;

        if (res == null) expr else res
      });
      when (res.ty == null)
        res.ty = expr.ty;
      //Message.Debug ($"walk: $expr -> $res");
      res
    }

    static null_walk (f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      def res = Util.locate (expr.Location, {
        def res = f (expr);
        if (res == null) do_walk (f, expr) else res;
      });
      when (res != null && res.ty == null)
        res.ty = expr.ty;
      //Message.Debug ($"null_walk: $expr -> $res");
      res
    }


    static walks (f : TExpr -> TExpr, exprs : list [TExpr]) : list [TExpr]
    {
      mutable cnt = 0;
      mutable total = 0;
      mutable first_expr = null;

      foreach (expr in exprs) {
        when (first_expr == null) {
          def expr' = null_walk (f, expr);
          when (expr' != null)
            first_expr = expr';
          cnt++;
        }
        total++;
      }

      if (first_expr == null) exprs
      else {
        def loop (res, n, l) {
            match (l) {
              | x :: xs =>
                if (n == 0)
                  xs.RevAppend (first_expr :: res)
                else
                  loop (walk (f, x) :: res, n - 1, xs)
              | [] => Util.ice ()
            }
        }
        loop ([], total - cnt, exprs.Rev ())
      }
    }

    static do_walk (f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      match (expr)
      {
        | Cache
        | CacheRef
        | Delayed
        | PropertyMember
        | StaticPropertyRef
        | EventMember
        | Block
        | StaticEventRef =>
          // this is supposed to be run after Typer2
          Message.Warning (expr.Location, $"invalid expr in walk: $(expr.GetType()): $expr");
          assert(false)


        | This
        | LocalRef
        | LocalFunRef
        | StaticRef
        | Error
        | OpCode
        | TypeOf
        | MethodOf | CtorOf | FieldOf
        | TExpr.Literal
        | Base
        | ImplicitValueTypeCtor
        | MethodAddress
        | Goto
        | DefaultValue
        | ConstantObjectRef => null


        | DefFunctionsIn (funs, body) =>
          foreach (fn in funs)
            match (fn.body) {
              | FunBody.Typed (e) =>
                fn.body = FunBody.Typed (walk (f, e))
              | _ => {}
            }
          DefFunctionsIn (funs, walk (f, body))

        | ClosureObjectOf(e)  => ClosureObjectOf(walk(f, e))
        | ClosureFieldOf(e)   => ClosureFieldOf(walk(f, e))

        | MethodRef (obj, meth, tp, notvirt) =>
          def obj = null_walk (f, obj);
          if (obj == null) null
          else
            MethodRef (obj, meth, tp, notvirt)


        | FieldMember (obj, fld) =>
          def obj = null_walk (f, obj);
          if (obj == null) null
          else
            FieldMember (obj, fld)


        | Call (func, parms, is_tail) =>
          def func = walk (f, func);
          mutable rev_parms = [];
          foreach (p in parms)
            rev_parms = Param (p.kind, walk (f, p.expr), p.name, p.required_type) :: rev_parms;
          Call (func, rev_parms.Rev (), is_tail)


        | SelfTailCall (_, parms) =>
          foreach (p in parms)
            p.expr = walk (f, p.expr);
          null


        | Assign (target, source) =>
          def target' = walk (f, target);
          def source' = walk (f, source);
          if (target' : object == target && source' : object == source)
            null
          else
            Assign (target', source')


        | MultipleAssign (assigns) =>
          MultipleAssign (assigns.Map (fun (s, t) { (s, walk (f, t)) }))


        | DefValIn (name, val, body) =>
          def val' = walk (f, val);
          def body' = walk (f, body);
          if (val' : object == val && body' : object == body)
            null
          else
            DefValIn (name, val', body')


        | Match (matched_value, cases) =>
          foreach (case in cases) {
            mutable pats = [];
            foreach ((pat, expr, assigns) in case.patterns) {
              def assigns =
                assigns.Map (fun (v, e) { (v, walk (f, e)) });
              pats = (pat, walk (f, expr), assigns) :: pats
            }
            case.patterns = pats.Rev ();
            case.body = walk (f, case.body);
          }
          def matched_value = null_walk (f, matched_value);
          if (matched_value == null) null
          else
            Match (matched_value, cases)


        | If (cond, e1, e2, l1, l2) =>
          def cond' = walk (f, cond);
          def e1'   = walk (f, e1);
          def e2'   = walk (f, e2);

          if (cond' : object == cond &&
              e1'   : object == e1   &&
              e2'   : object == e2)
            null
          else
            If (cond', e1', e2', l1, l2)


        | Switch (ind, defl, cases) =>
          Switch (walk (f, ind),
                  match (defl) {
                    | Some (d) => Some (walk (f, d))
                    | None => defl
                  },
                  cases.Map (fun (n, e) { (n, walk (f, e)) }))


        | HasType (e, t) =>
          def e = null_walk (f, e);
          if (e == null) null
          else
            HasType (e, t)


        | Throw (exn) =>
          // exception can be null for `throw;' rethrow expression
          if (exn != null) {
            def exn = null_walk (f, exn);
            if (exn == null) null
            else Throw (exn)
          } else
            null

        | TryFinally (body, handler) =>
          TryFinally (walk (f, body), walk (f, handler))

        | Try (body, cases) =>
          def walk_case(case) {
            | TryCase.Fault (handler) => TryCase.Fault (walk (f, handler))
            | TryCase.Catch (exn, handler) => TryCase.Catch (exn, walk (f, handler))
            | TryCase.Filter (exn, filter, handler) => TryCase.Filter (exn, walk (f, filter), walk (f, handler))
          }
          Try (walk (f, body), cases.Map (walk_case))

        | TypeConversion (expr, t, kind, tl) =>
          def expr = null_walk (f, expr);
          if (expr == null) null
          else
            TypeConversion (expr, t, kind, tl)


        | DebugInfo (null, _) => null


        | DebugInfo (e, pe) =>
          def e1 = walk (f, e);

          if (e1 : object == e)
            null
          else
            DebugInfo (expr.Location, e1.ty, e1, pe)


        | Sequence (e1, e2) =>
          def e1' = walk (f, e1);
          def e2' = walk (f, e2);
          if (e1' : object == e1 && e2' : object == e2)
            null
          else
            Sequence (e1', e2')


        | Tuple (args) =>
          Tuple (walks (f, args))


        | TupleIndexer (obj, k, n) =>
          def obj = null_walk (f, obj);
          if (obj == null) null
          else
            TupleIndexer (obj, k, n)


        | Array (args, dimensions) =>
          Array (walks (f, args), walks (f, dimensions))


        | ArrayIndexer(obj, args)    => ArrayIndexer(  walk(f, obj), walks(f, args))
        | PointerIndexer(obj, index) => PointerIndexer(walk(f, obj), walk(f, index))
        | MacroEnvelope (id, orig, body, epe) =>
          def body = null_walk (f, body);
          if (body == null) null
          else
            MacroEnvelope (id, orig, body, epe)

        | Label (id, body) =>
          def body = null_walk (f, body);
          if (body == null) null
          else
            Label (id, body)

        | Def
        | Use
           => assert(false)
      }
    }

    /** Walk [this] with the function [f].

        The function is applied to each and every expression node.

        If [f] returns a value different than [null], the value is
        returned, from this [Walk] function.

        If it returns [null], the walking function descends into tree
        elements in a map-like fashion.

        If the type of expression returned was to be [null], it is set
        to the type of the original expression.

        This function implements the visitor pattern.  */
    public Walk(f : TExpr -> TExpr) : TExpr
    {
      walk (f, this)
    }


    public static BoolLiteral (mgr : ManagerClass, val : bool) : TExpr
    {
      TExpr.Literal (mgr.InternalType.Boolean,
                     Nemerle.Compiler.Literal.Bool (val));
    }

    public static TrueLiteral (mgr : ManagerClass) : TExpr { BoolLiteral (mgr, true) }
    public static FalseLiteral (mgr : ManagerClass) : TExpr { BoolLiteral (mgr, false) }
  }
} // namespace
