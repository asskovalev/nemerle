using Nemerle.Compiler;
using Nemerle.Internal;
using Nemerle.Utility;
using Nemerle.Assertions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Compiler.Typedtree
{
  public variant TExpr : TypedBase
  {
    // always valid
    | StaticRef             { from : FixedType.Class; mem : IMember; type_parms : list [TypeVar]; }
    | LocalRef              { decl : LocalValue; }
    | ImplicitValueTypeCtor
    | FieldMember           { obj : TExpr; fld : IField; }
    | MethodRef             { obj : TExpr; meth : IMethod; type_parms : list [TypeVar]; notvirtual : bool; }
    | Call                  { mutable func : TExpr; mutable parms : list[Param]; mutable is_tail : bool;
                              public override SetParsedObject(related : ParsedBase) : void
                              {
                                match (related)
                                {
                                  | null => ()
                                  | PExpr.Call(pfunc, _) => func.SetParsedObject(pfunc)
                                  | _ => ()
                                }

                                base.SetParsedObject(related)
                              }
                            }
    | Assign                { target : TExpr; source : TExpr; }
    | DefValIn              { name : LocalValue; val : TExpr; mutable body : TExpr; }
    | Throw                 { exn : TExpr; }
    | TryFinally            { body : TExpr; handler : TExpr; }
    | Try                   { body : TExpr; mutable cases : list [TryCase]; }
    | Literal               { val : Nemerle.Compiler.Literal; }
    | This
    | Base                  { base_ctor : IMethod; }
    | TypeConversion        { mutable expr : TExpr; target_type : TypeVar; kind : ConversionKind;
                              mutable target_type_location : Location;

                              this (loc : Location, tv : TypeVar, expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (loc, tv, expr, target_type, kind, Location.Default);
                              }

                              this (tv : TypeVar, expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (tv, expr, target_type, kind, Location.Default);
                              }

                              this (expr : TExpr, target_type : TypeVar, kind : ConversionKind)
                              {
                                this (expr, target_type, kind, Location.Default);
                              }

                            }
    | Sequence              { mutable e1 : TExpr; mutable e2 : TExpr; }
    | Tuple                 { args : list [TExpr]; }
    | Array                 { args : list [TExpr]; dimensions : list [TExpr]; }

    | TypeOf                { target_type : TypeVar; }
    | MethodOf              { from_type : TypeVar; method : IMethod; typars : list [TypeVar] }
    | CtorOf                { @type : TypeVar; method : IMethod; }
    | FieldOf               { @type : TypeVar; field  : IField; }
    | ClosureObjectOf       { varRef : TExpr; }
    | ClosureFieldOf        { varRef : TExpr;
                              public new this(types : InternalTypeClass, varRef : TExpr)
                              {
                                _ty         = types.FieldInfo;
                                this.varRef = varRef;
                              }
                            }

    | ArrayIndexer          { obj : TExpr; args : list [TExpr]; }
    | PointerIndexer        { obj : TExpr; index : TExpr; }
    | TupleIndexer          { obj : TExpr; pos : int; len : int; } // 0-based
    | OpCode                { name : string; }
    | MacroEnvelope         { original : PExpr; the_macro : IMacro; expanded : TExpr; expandedPExpr : PExpr; }

    // invalid after T2
    | PropertyMember        { obj : TExpr; prop : IProperty; }
    | StaticPropertyRef     { from : FixedType.Class; prop : IProperty; }
    | EventMember           { obj : TExpr; ev : IEvent; }
    | StaticEventRef        { from : FixedType.Class; ev : IEvent; }
    | ConstantObjectRef     { from : FixedType.Class; mem : IField; }
    | Block                 { jump_out : LocalValue; body : TExpr; }
    | Delayed               { susp : Typer.DelayedTyping; }

    | Cache                 { desc : CacheDesc; mutable body : TExpr; }
    | CacheRef              { desc : CacheDesc; }

    | Error

    // invalid after T3
    | DefFunctionsIn        { funs : list [TFunHeader]; mutable body : TExpr; }
    | Match                 { expr : TExpr; cases : list [TMatchCase]; }
    | SelfTailCall          { func : TExpr; parms : list [Param]; }
    | LocalFunRef           { decl : LocalValue; type_parms : list [TypeVar]; }

    // new CG-related stuff
    | MethodAddress         { from : TypeVar; meth : IMethod; is_virt : bool;
                              type_parms : list [TypeVar]; }
    | MultipleAssign        { assigns : list [LocalValue * TExpr]; }
    // we cannot directly reference Label from Goto, because Walk() would
    // destroy it
    | Label                 { id : int; body : TExpr; }
    // The try_block exact value has meaning only in T4, outside a value
    // different than zero means that we should use [leave] and not [br].
    // This is set in T4, if you create nodes of this type earlier, set
    // it to 1.
    | Goto                  { target : int; mutable try_block : int; }
    | DefaultValue
    | If                    { cond : TExpr; e_then : TExpr; e_else : TExpr;
                              mutable then_debug_loc : Location; mutable else_debug_loc : Location; }
    | HasType               { expr : TExpr; test_ty : FixedType; }
    | Switch                { indexing_expr : TExpr;
                              default : option [TExpr];
                              cases : list [int * TExpr]; }
    // Used only by optimizer (between T3 & T4)
    | Def                   { mutable expr : TExpr; mutable into : TExpr; }
    | Use                   { mutable expr : TExpr; mutable def_of : TExpr.Def; }

    mutable _ty : TypeVar;
    public   ty : TypeVar
    {
      [System.Diagnostics.DebuggerStepThrough]
      get { _ty }
      [System.Diagnostics.DebuggerStepThrough]
      set { _ty = value }
    }

    public Type : TypeVar
    { [System.Diagnostics.DebuggerStepThrough]
      get { if (ty == null) GetType(ManagerClass.Instance) else ty }

      internal set
      {
        ty = value;
      }
    }

    internal CheckAfterT2(walker : Walker) : void
    {
      def walk(e)
      {
        | PropertyMember
        | StaticPropertyRef
        | EventMember
        | StaticEventRef
        | ConstantObjectRef
        | Block
        | Delayed
        | Cache
        | CacheRef
        | Error =>
          Util.ice ($"invalid TExpr after T2: $e");
        | Def
        | Use =>
          Util.ice ($"invalid def/use TExpr after T2: $e");
        | _ => null
      }
      _ = walker.Walk(walk, this);
    }

    internal CheckAfterT3(walker : Walker) : void
    {
      def walk(e)
      {
        | PropertyMember
        | StaticPropertyRef
        | EventMember
        | StaticEventRef
        | ConstantObjectRef
        | Block
        | Delayed
        | Cache
        | CacheRef
        | Error       => Util.ice ($"invalid TExpr after T3(T2): $e");
        | DefFunctionsIn
        | Match
        | SelfTailCall
        | LocalFunRef => Util.ice ($"invalid TExpr after T3: $e");
        | Def
        | Use         => Util.ice ($"invalid def/use TExpr after T3: $e");
        | _           => null
      }
      _ = walker.Walk(walk, this);
    }

    [FlagAccessor(IsAssigned,     flags = WantSetter | Internal)]
    [FlagAccessor(JumpTarget,     flags = WantSetter | Internal)]
    [FlagAccessor(Visited,        flags = WantSetter | Internal)]
    [FlagAccessor(GenerateTail,   flags = WantSetter | Internal)]
    [FlagAccessor(SkipWriteCheck, flags = WantSetter | Internal)]
    mutable flags : TExprFlags;

    #region Typer4 and ILGenerator stuff
    internal Throws : bool
    {
      get
      {
        Util.cassert (flags %&& TExprFlags.ThrowsComputed, $"throws not computed for $this");
        flags %&& TExprFlags.Throws
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.ThrowsComputed), $"throws already computed for $this");
        if (value)
          flags |= TExprFlags.Throws
        else
          flags &= ~TExprFlags.Throws;

        flags |= TExprFlags.ThrowsComputed;
      }
    }

    internal NeedsEmptyStack : bool
    {
      get
      {
        Util.cassert(flags %&& TExprFlags.NeedsEmptyStackComputed, $"NeedsEmptyStack not computed for $this");
        flags %&& TExprFlags.NeedsEmptyStack
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.NeedsEmptyStackComputed), $"NeedsEmptyStack already computed for $this");
        if (value)
          flags |= TExprFlags.NeedsEmptyStack
        else
          flags &= ~TExprFlags.NeedsEmptyStack;

        flags |= TExprFlags.NeedsEmptyStackComputed;
      }
    }

    internal NeedsConstrained : bool
    {
      get { flags %&& TExprFlags.Constrained  }
      set { when (value) flags |= TExprFlags.Constrained }
    }

    internal IsAddressable : bool
    {
      get
      {
        unless (flags %&& TExprFlags.AddressableComputed)
          match (this)
          {
            | StaticRef | LocalRef | ArrayIndexer | PointerIndexer | This => IsAddressable = true;
            | FieldMember (obj, fld) =>
              if (fld.DeclaringType.IsValueType)
                IsAddressable = obj.IsAddressable;
              else
                IsAddressable = true;

            | _ => IsAddressable = false;
          }

        flags %&& TExprFlags.Addressable
      }

      set
      {
        Util.cassert(!(flags %&& TExprFlags.AddressableComputed));

        if (value)
          flags |= TExprFlags.Addressable
        else
          flags &= ~TExprFlags.Addressable;

        flags |= TExprFlags.AddressableComputed;
      }
    }

    internal NeedAddress : bool
    {
      get { flags %&& TExprFlags.NeedAddress }
    }

    internal setNeedAddress(from_ctor : bool) : bool
    {
      Util.cassert(!NeedAddress);

      match (this)
      {
        | StaticRef
        | LocalRef
        | ArrayIndexer
        | PointerIndexer
        | This =>
          flags |= TExprFlags.NeedAddress;
          true

        | FieldMember (This as obj, fld) with is_mutable = from_ctor || fld.IsMutable
        | FieldMember (obj, fld) with is_mutable = fld.IsMutable || fld.Attributes %&& NemerleModifiers.CompilerMutable =>
          if (is_mutable) {
          //Message.Debug ($"am being assigned $this");
            flags |= TExprFlags.NeedAddress;
            if (fld.DeclaringType.IsValueType && !obj.NeedAddress)
              obj.setNeedAddress (from_ctor);
            else
              true
          }
          else
            false

        | _ => false
      }
    }
    #endregion

    public GetType(manager : ManagerClass) : TypeVar
    {
      when (ty == null)
      {
        TryInitType(manager);

        when (ty == null)
        {
          if (manager.IsIntelliSenseMode)
          {
            System.Diagnostics.Trace.WriteLine($"type is null for $(this.Location), $this");
            ty = manager.Solver.FreshTypeVar ()
          }
          else
            assert(ty != null, $ "still null, $(this.Location), $this");
        }
      }

      ty
    }

    public TryInitType(manager : ManagerClass) : void
    {
      when (ty == null)
      {
        def InternalType = manager.InternalType;
        match (this)
        {
          | Throw | Goto | Error       => ty = manager.Solver.FreshTypeVar ()
          | TExpr.Literal (l)          => ty = l.GetInternalType (InternalType)
          | Assign                     => ty = InternalType.Void
          | HasType                    => ty = InternalType.Boolean
          | MacroEnvelope (_, _, e, _) => ty = e.GetType(manager)
          | Cache as c =>
            assert(c.body != null, $ "when trying to determin type, body is null: $this");
            ty = c.body.GetType(manager)

          | TypeOf                     => ty = InternalType.Type
          | CtorOf                     => ty = InternalType.ConstructorInfo
          | MethodOf                   => ty = InternalType.MethodInfo

          | _ => ()
        }
      }
    }

    // Code which change state can't be property!
    public FixedType() : FixedType
    {
      Type.Fix()
    }

    public this () { }

    public this (ty : TypeVar)
    {
      this.ty = ty;
    }

    public this (loc : Location, ty : TypeVar)
    {
      base (loc);
      this.ty = ty;
    }


    public override ToString() : string { PrettyPrint.SprintTyExpr (this) }


    // it does not copy calls
    public Copy(walker : Walker) : TExpr
    {
      def do_copy(expr : TExpr) : TExpr
      {
        | This                                  => This()
        | LocalRef(decl)                        => LocalRef(decl)
        | StaticRef(from, mem, parms)           => StaticRef(from, mem, parms)
        | OpCode(o)                             => OpCode(o)
        | TypeOf(t)                             => TypeOf(t)
        | MethodOf(from_type, method, typars)   => MethodOf(from_type, method, typars)
        | CtorOf(ty, m)                         => CtorOf(ty, m)
        | FieldOf(ty, f)                        => FieldOf(ty, f)
        | ClosureObjectOf(x)                    => ClosureObjectOf(x)
        | ClosureFieldOf(x)                     => ClosureFieldOf(x)
        | TExpr.Literal(l)                      => TExpr.Literal(l)
        | Base(ctor)                            => Base(ctor)
        | ImplicitValueTypeCtor                 => ImplicitValueTypeCtor()
        | MethodAddress(from, meth, v, typarms) => MethodAddress(from, meth, v, typarms)
        | Goto(id, t)                           => Goto(id, t)
        | DefaultValue                          => DefaultValue()
        | ConstantObjectRef(from, mem)          => ConstantObjectRef(from, mem)
        | _                                     => null // FIXME
      }
      
      walker.Walk(do_copy, this)
    }

    public Walk(walker : Walker, f : TExpr -> TExpr) : TExpr
    {
      walker.Walk(f, this)
    }

    public With(prototype : TExpr) : TExpr
    {
      when (prototype != null && this : object != prototype && _N_GetVariantCode() == prototype._N_GetVariantCode())
      {
        //IsStatement = prototype.IsStatement;
        SetParsedObject(prototype.ParsedObject);
      }
      
      this
    }

    public Set(prototype : TExpr) : TExpr
    {
      when (prototype != null && this : object != prototype)
      {
        //IsStatement = prototype.IsStatement;
        SetParsedObject(prototype.ParsedObject);
      }
      
      this
    }
    
    public SetIsStatement() : void
    {
      //def doWalk(expr : TExpr) : void
      //{
      //  | TypeConversion as x => doWalk(x.expr)
      //  | _ =>
      //    when (expr.ParsedObject != null && !expr.Location.IsGeneratedOrEmpty)
      //      expr.IsStatement = true;
      //}
      //
      //doWalk(this)
    }

    public static BoolLiteral(mgr : ManagerClass, val : bool) : TExpr
    {
      TExpr.Literal(mgr.InternalType.Boolean, Nemerle.Compiler.Literal.Bool(val));
    }

    public static TrueLiteral(mgr : ManagerClass)  : TExpr { BoolLiteral(mgr, true) }
    public static FalseLiteral(mgr : ManagerClass) : TExpr { BoolLiteral(mgr, false) }
  }
} // namespace
