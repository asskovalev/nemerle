using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Assertions;

using Obsolete = System.ObsoleteAttribute;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler.Typedtree
{
  public class TFunHeader : TypedBase, System.IComparable [TFunHeader], Parsetree.IParametersProvider
  {
    public Name               : string              { get; internal set; }
    public ReturnType         : TypeVar             { get; internal set; }
    public ReturnTypeLocation : Location            { get; internal set; }
    public Parameters         : list[TParameter]    { get; internal set; }
    public TypeParameters     : list[StaticTypeVar] { get; internal set; }
    public TypeVarEnv         : TypeVarEnv          { get { tenv } }
    public Body               : FunBody             { get { body } }
    public ParsedBody         : PExpr               { get; private set; }
    public TypedBody          : TExpr               { get; private set; }
    public ClosureVars        : list [LocalValue]   { get { closure_vars } }
    public Declaration        : LocalValue          { get { decl } }
    public Parsed             : PT.FunctionDecl     { get; set; };
    
    [Obsolete("Use ReturnTypeLocation instead of RetTypeLoc")]
    public RetTypeLoc         : Location            { get { ReturnTypeLocation } }
    [Obsolete("Use ReturnType instead of RetType")]
    public RetType            : TypeVar             { get { ReturnType } }
    

    [Obsolete("Use Name instead of name")]
    public name         : string          { get { Name } }
    public id           : int;
    [Obsolete("Use ReturnType instead of ret_type")]
    public ret_type     : TypeVar                 { get { ReturnType } }
    [Obsolete("Use ReturnTypeLocation instead of ret_type_loc")]
    public ret_type_loc : Location                { get { ReturnTypeLocation } }
    [Obsolete("Use Parameters instead of parms")]
    public parms                : list [TParameter] { get { Parameters } }
    [Obsolete("Use TypeParameters instead of typarms")]
    public typarms      : list [StaticTypeVar] { get { TypeParameters } }
    public tenv         : TypeVarEnv;

    public mutable usage : FunctionUsage;
    private mutable _body : FunBody;
    public body : FunBody
    {
      get { _body }
      set
      {
        match (value)
        {
          | Parsed(expr) => this.ParsedBody = expr;
          | Typed(expr)  => this.TypedBody = expr;
          | ILed
          | Abstract
          | null     => ()
        }
        
        _body = value;
      }
    }
    public mutable has_1st_class_child : bool;
    public mutable cannot_inline : bool;
    public ConvertToLoopWithClosure : bool { get; internal set; }

    /// local values defined in this function, which are closurised (used by children)
    public mutable closure_vars : list [LocalValue] = [];
    /// local value, which is declaring this function (valid for local funs)
    public mutable decl : LocalValue;
    public mutable all_locals : list [LocalValue] = [];
    internal mutable children_funs : list [TFunHeader] = [];
    internal mutable uses_try_block : bool;
    internal mutable yield_type : TypeVar;
    internal mutable is_in_closure_of : int;

    // FIXME: move to hashtables in t3
    internal mutable used_closures : list [TFunHeader];
    internal mutable static_method : IMethod;
    internal mutable typarms_to_pass : list[TypeVar]; 
    internal mutable closure_type : FixedType.Class;
    public FunLocation : Location { get; internal set; }
    // end

    public this(loc          : Location,
                name         : string,
      [NotNull] ret_type     : TypeVar,
                ret_type_loc : Location,
                parms        : list[TParameter],
                typarms      : list[StaticTypeVar],
                tenv         : TypeVarEnv,
                funLocation  : Location = default(_))
    {
      base (loc);

      this.Name               = name;
      this.ReturnType         = ret_type;
      this.ReturnTypeLocation = ret_type_loc;
      this.Parameters         = parms;
      this.TypeParameters     = typarms;
      this.tenv               = tenv;
      FunLocation             = funLocation;
      
      id = ret_type.Manager.GetNewId();
      usage = FunctionUsage.NotUsed;
    }

    public Reset() : void
    {
      body                      = null;
      has_1st_class_child       = false;
      cannot_inline             = false;
      ConvertToLoopWithClosure  = false;
      closure_vars              = [];
      decl                      = null;
      all_locals                = [];
      children_funs             = [];
      uses_try_block            = false;
      yield_type                = null;
      is_in_closure_of          = 0;
      used_closures             = null;
      static_method             = null;
      typarms_to_pass           = null;
      closure_type              = null;
    }

    public CompareTo (other : TFunHeader) : int
    {
      id - other.id
    }

    /**
     *  Retrieves functions in which current function is nested. Empty list if
     *  this is a plain method of some class.
     */
    public GetParents () : list [TFunHeader]
    {
      if (decl != null)
        match (decl.ValKind) {
          | LocalValue.Kind.Function (_, pars) => pars
          | _ => Util.ice ("invalid value kind for function")
        }
      else []
    }

    public override ToString () : string
    {
      $"$Name(..$Parameters) : $ReturnType"
    }

    public ParametersDeclarations : list [Parsetree.PParameter]
    {
      get { Parameters.Map(_.AsParsed ())  }
    }

    public ParametersReferences : list [PExpr]
    {
      get { Parameters.Map(_.ReferencingExpr) }
    }

    public CreateAliasMethod(mods : NemerleModifiers, obj : PExpr, custom_subst : Subst) : Parsetree.ClassMember
    {
      def attrs = AttributesAndModifiers(mods, []);

      def parse_tr = <[ decl:
        ..$attrs $(this.Name : usesite) (..$(this.ParametersDeclarations)) : $(this.ReturnType : typed)
        {}
      ]>;
      parse_tr.header.TypeParameters = Parsetree.CopyTypedTyparms(this.TypeParameters, custom_subst);
      def tyargs = parse_tr.header.TypeParameters.ExistingTyvars.Map (x => <[ $(FixedType.StaticTypeVarRef (x) : typed) ]>);
      parse_tr.Body = <[ $obj.$(this.Name : usesite) .[..$tyargs] (..$(this.ParametersReferences)) ]>;
      parse_tr
    }
  } // class
} // namespace
