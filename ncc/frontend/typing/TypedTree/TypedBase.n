using System.Diagnostics;
using System.Globalization;
using System.Math;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  /// Root of parsed typed expr
  [Record]
  public class TypedBase : Located
  {
    [RecordIgnore] public ParsedObject : ParsedBase { get; private set; }

    public virtual SetParsedObject([NotNull] related : ParsedBase) : void
    {
      def relatedIsGenerated = related.Location.IsGenerated;

      when (ParsedObject == null || (ParsedObject.Location.IsGenerated && !relatedIsGenerated))
      {
        related.SetTypedObject(this);
        ParsedObject = related;
      }

      when (!related.Location.IsEmpty && (Location.IsEmpty || Location.IsGenerated && !relatedIsGenerated))
        Location = related.Location;
    }

    public UpdateRelatedParsedObject() : void
    {
      ParsedObject?.SetTypedObject(this);
    }
  }
} // Nemerle.Compiler
