using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler.Test
{
  internal variant NccMessageType
  {
    | Unknown
    | Error   { line : int }
    | Warning { line : int }
    | Hint    { line : int }
    | GlobalError
    | GlobalWarning

    public static Parse(text : string) : NccMessageType
    {
      regexp match(text)
      {
        | @".*?\((?<lineNumber>\d+),\d+(?:,\d*,\d*)?\):\s*error\s*:.*"
        | @".*?:(?<lineNumber : int>\d*):\d*:(\d*:\d*:)?\s*error\s*:.*"   => Error(lineNumber)
        | @".*?\((?<lineNumber>\d+),\d+(?:,\d*,\d*)?\):\s*warning\s*:.*"
        | @".*?:(?<lineNumber : int>\d*):\d*:(\d*:\d*:)?\s*warning\s*:.*" => Warning(lineNumber)
        | @".*?\((?<lineNumber>\d+),\d+(?:,\d*,\d*)?\):\s*hint\s*:.*"
        | @".*?:(?<lineNumber : int>\d*):\d*:(\d*:\d*:)?\s*hint\s*:.*"    => Hint(lineNumber)
        | @".*?error\s*:.*"   => GlobalError()
        | @".*?warning\s*:.*" => GlobalWarning()
        | _               => Unknown()
      }
    }
  }
}
