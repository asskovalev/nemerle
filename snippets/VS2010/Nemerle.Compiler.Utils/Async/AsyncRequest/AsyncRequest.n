using System;
using System.Linq;
using System.Threading;

using Nemerle.Collections;
using Nemerle.Completion2;
using Nemerle.Utility;

namespace Nemerle.Compiler.Utils.Async
{
  /// <summary>
  /// Description of WorkRequest.
  /// </summary>
  public class AsyncRequest
  {
    public this(
      requestType : AsyncRequestType,
      engine      : IIdeEngine,
      ideSource   : IIdeSource,
      work        : Action[AsyncRequest])
    {
      Type    = requestType;
      Engine  = engine;
      Source  = ideSource;
      _doWork = work;

      when (ideSource != null)
        _sourceSnapshot = ideSource.GetSourceSnapshot();
    }

            _doWork        : Action[AsyncRequest];

    public Source           : IIdeSource { get; private set; }
    public IsSourcePresent  : bool       { get { Source != null } }
    private _sourceSnapshot : SourceSnapshot;

    public  Engine          : IIdeEngine           { get; private set; }
    public  Type            : AsyncRequestType     { get; private set; }
    public  Stop            : bool                 { get;         set; }
    public  IsCompleted     : bool                 { get; private set; }
    mutable _waitHandle     : ManualResetEvent;
    public AsyncWaitHandle  : WaitHandle
    {
      get
      {
        when (_waitHandle == null)
          _waitHandle = ManualResetEvent(IsCompleted);

        _waitHandle
      }
    }

    public GetSourceSnapshot() : SourceSnapshot { _sourceSnapshot }

    public MarkAsCompleted() : void
    {
      IsCompleted = true;
      when (_waitHandle != null && !_waitHandle.SafeWaitHandle.IsClosed)
      {
        ignore(_waitHandle.Set());
        _waitHandle.Close();
      }
    }

    public DoWork() : void { _doWork(this); }

    /// Возвращает true, если данная задача теряет смысл если "other" помещается в
    // очередь после данной.
    public virtual IsForceOutBy(other : AsyncRequest) : bool
    {
      if (object.ReferenceEquals(this, other))
        false;
      else if (other.Engine : object != this.Engine)
        false
      else if (other.Type == AsyncRequestType.CloseProject)
        true
      else match (Type)
      {
        | AsyncRequestType.UpdateCompileUnit => other.Type == AsyncRequestType.BuildTypesTree
        | AsyncRequestType.BuildTypesTree    => other.Type == AsyncRequestType.BuildTypesTree
        | _ => false
      }
    }

    public override ToString() : string { $"$Type" }
  }
}
