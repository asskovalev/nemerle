using System;
using System.Diagnostics;
using System.IO;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Typed = Nemerle.Compiler.Typedtree;
using SCG   = System.Collections.Generic;
using SR    = System.Reflection;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginFindAllSymbols(pattern : string, callback : object) : void
    {
      def request = FindAllSymbolsRequest(AsyncRequestType.FindAllSymbols, this, FindAllSymbols, pattern, callback);
      AsyncWorker.AddWork(request);
    }

    private FindAllSymbols(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = CheckProjectAvailable(request);

          when (project != null)
          {
            def req      = request :> FindAllSymbolsRequest;
            def pattern  = req.Pattern;
            def callback = req.Callback;
            def builder  = SCG.List();
            def typeBuilders = project.NamespaceTree.GetTypeBuilders();
            foreach (typeBuilder when StringPatternMatching.MatchPattern(typeBuilder.Name, pattern) in typeBuilders)
            {
              foreach (part in typeBuilder.AstParts)
              {
                def type  = GetGlyphTypeForType(typeBuilder);
                def spans = StringPatternMatching.MatchPatternSpans(typeBuilder.Name, pattern);
                builder.Add(SymbolInfo(type, typeBuilder.Name, $"$type: $typeBuilder", part.NameLocation, spans));
              }
            }

            def result1 = builder.ToArray();
            AsyncWorker.AddResponse(() => _callback.FoundSymbols(callback, result1));

            foreach (typeBuilder in typeBuilders)
            {
              builder.Clear();
              foreach (member in typeBuilder.GetMembers())
              {
                def type =
                  match (member)
                  {
                    | _ is MethodBuilder   => GlyphType.Method
                    | _ is EventBuilder    => GlyphType.Event
                    | _ is FieldBuilder    => GlyphType.Field
                    | _ is PropertyBuilder => GlyphType.Property
                    | t is TypeBuilder     => GetGlyphTypeForType(t)
                    | _                    => -1 :> GlyphType
                  };

                when (type :> int == -1)
                  continue;

                def name  = member.Name;
                def spans = StringPatternMatching.MatchPatternSpans(name, pattern);
                builder.Add(SymbolInfo(type, name, member.ToString(), member.NameLocation, spans));
              }
              def result2 = builder.ToArray();
              AsyncWorker.AddResponse(() => _callback.FoundSymbols(callback, result2));
            }

            AsyncWorker.AddResponse(() => _callback.FoundSymbols(callback, array(0)));
            request.MarkAsCompleted();
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetQuickTipInfo operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }

    static GetGlyphTypeForType(typeBuilder : TypeBuilder) : GlyphType
    {
      if (typeBuilder.IsEnum)
        GlyphType.Enum
      else if (typeBuilder.IsInterface)
        GlyphType.Interface
      else if (typeBuilder.IsStruct)
        GlyphType.Struct
      else if (typeBuilder.IsStruct)
        GlyphType.Struct
      else if (typeBuilder.IsDelegate)
        GlyphType.Delegate
      else if (typeBuilder.IsVariantOption)
        GlyphType.VariantOption
      else
        GlyphType.Class
    }
  } // end class Engine
} // end namespace
