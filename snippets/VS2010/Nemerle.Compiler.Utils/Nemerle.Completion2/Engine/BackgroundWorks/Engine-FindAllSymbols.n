using System;
using System.IO;
using System.Diagnostics;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SCG   = System.Collections.Generic;
using SR    = System.Reflection;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginFindAllSymbols(callback : object) : void
    {
      def request = FindAllSymbolsRequest(AsyncRequestType.FindAllSymbols, this, FindAllSymbols, callback);
      AsyncWorker.AddWork(request);
    }

    private FindAllSymbols(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = CheckProjectAvailable(request);

          when (project != null)
          {
            def req      = request :> FindAllSymbolsRequest;
            def callback = req.Callback;
            def builder  = SCG.List();
            def typeBuilders = project.NamespaceTree.GetTypeBuilders();
              foreach (typeBuilder in typeBuilders)
              {
                foreach (part in typeBuilder.AstParts)
                {
                  def type =
                    if (typeBuilder.IsEnum)
                      GlyphType.Enum
                    else if (typeBuilder.IsInterface)
                      GlyphType.Interface
                    else if (typeBuilder.IsStruct)
                      GlyphType.Struct
                    else if (typeBuilder.IsStruct)
                      GlyphType.Struct
                    else if (typeBuilder.IsDelegate)
                      GlyphType.Delegate
                    else if (typeBuilder.IsVariantOption)
                      GlyphType.VariantOption
                    else
                      GlyphType.Class
                    ;
                  builder.Add(SymbolInfo(type, typeBuilder.Name, typeBuilder.FullName, part.NameLocation));
                }
              }

            def result = builder.ToArray();
            request.MarkAsCompleted();
            AsyncWorker.AddResponse(() => _callback.FoundSymbols(callback, result));
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetQuickTipInfo operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace
