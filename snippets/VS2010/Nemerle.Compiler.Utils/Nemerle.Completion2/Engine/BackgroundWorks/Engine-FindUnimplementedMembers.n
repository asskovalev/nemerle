using System;
using System.IO;
using System.Diagnostics;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Completion2;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using SCG = System.Collections.Generic;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginFindUnimplementedMembers(source : IIdeSource, at : Location) : CodeInfoAsyncRequest
    {
      def request = CodeInfoAsyncRequest(AsyncRequestType.FindUnimplementedMembers,
        this, source, FindUnimplementedMembers, at);
      AsyncWorker.AddWork(request);
      request
    }

    private FindUnimplementedMembers(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = CheckProjectAvailable(request);

          when (project != null)
          {
            def req = request :> CodeInfoAsyncRequest;
            match(project.FindUnimplementedMembers(req.At))
            {
              | Some((ty, unimplementedMembers)) when unimplementedMembers != null =>
                AsyncWorker.AddResponse(() =>
                  _callback.AddUnimplementedMembers(request.Source, ty,
                    unimplementedMembers.GroupBy(((t, _)) => t, ((_, m)) => m)));
                assert(false);

              | _ => AsyncWorker.AddResponse(() => _callback.ShowMessage("No unimplemented methods found.", MessageType.Info))
            }
            request.MarkAsCompleted();
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetQuickTipInfo operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace
