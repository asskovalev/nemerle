using System;
using System.IO;
using System.Diagnostics;
using SCG = System.Collections.Generic;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Imperative;
using Nemerle.Surround;
using Nemerle.Utility;

using Nemerle.Compiler.Utils;
using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using Nemerle.Completion2;

namespace Nemerle.Completion2
{
  internal partial class Engine
  {
    public BeginGetInheritorsGotoInfo(source : IIdeSource, at : Location) : GotoInfoAsyncRequest
    {
      def request = GotoInfoAsyncRequest(AsyncRequestType.GetGotoInfo, this, source, GetInheritorsGotoInfo, at, GotoKind.Definition);
      request.GotoInfos = array(0);
      AsyncWorker.AddWork(request);
      request
    }

    public GetInheritorsGotoInfo(source : IIdeSource, at : Location) : array[GotoInfo]
    {
      def request = BeginGetInheritorsGotoInfo(source, at);
      _ = request.AsyncWaitHandle.WaitOne(10000);
      request.GotoInfos
    }

    private GetInheritorsGotoInfo(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();

      surroundwith (currentAsyncRequest)
      try
      {
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> GotoInfoAsyncRequest;

            req.GotoInfos = project.GetInheritors(req.At);

            request.MarkAsCompleted();
          }
        }
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The GetGotoInfo operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end namespace
