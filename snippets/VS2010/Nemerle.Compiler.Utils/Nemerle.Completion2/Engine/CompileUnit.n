using System;
using System.Collections.Generic;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils;

namespace Nemerle.Completion2
{
  [Record]
  public class CompileUnit
  {
    public TopNamespace          : Decl.Namespace                       { get; private set; }
    public TopDeclarations       : list[TopDeclaration]                 { get; private set; }
    public Regions               : list[Region]                         { get; private set; }
    public ParseCompilerMessages : array[CompilerMessageForCompileUnit] { get; private set; }
    /// First element have a fake line (this array indexed at 1).
    public Source                : SourceSnapshot                       { get; private set; }
    public CommentLocations      : System.Collections.Generic.List[Location * bool] {get; private set; }

    public override ToString() : string
    {
      def file = Source.File.FullName;
      $"$(GetType().Name) $file"
    }

    /// Finds the innermost top level construction (namespace, class,
    /// using, attribute) located at fileIndex, line, and col.
    public FindDecl(at : Location) : Decl
    {
      TopNamespace.FindDecl(at)
    }

    public FindMember(at : Location) : option[DeclarationBase]
    {
      def decl = TopNamespace.FindDecl(at);

      match (decl)
      {
        | Type(td) =>
          match (td.FindMember(at))
          {
            | Some as m => m
            | None      => Some(td)
          }

        | _        => None()
      }
    }
  }
}
