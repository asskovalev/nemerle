using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace Nemerle.Completion2
{
  public module StringPatternMatching
  {
    [ThreadStatic]
    static mutable _flags : array[bool];

    public MatchPattern(source : string, pattern : string) : bool
    {
      def compareInfo = CultureInfo.InvariantCulture.CompareInfo;
      mutable index = 0;
      for (mutable i = 0; i < pattern.Length; i++)
      {
        def ch = pattern[i];
        index = compareInfo.IndexOf(source, ch, index, CompareOptions.IgnoreNonSpace);
        when (index < 0)
          return false;
        index++;
      }

      true
    }

    public MatchPatternSpans(source : string, pattern : string) : array[NSpan]
    {
      def len = source.Length + 1;
      def flags = EnsureCapacity(len);
      def compareInfo = CultureInfo.InvariantCulture.CompareInfo;
      mutable index = 0;
      for (mutable i = 0; i < pattern.Length; i++)
      {
        def ch = pattern[i];
        index = compareInfo.IndexOf(source, ch, index, CompareOptions.IgnoreNonSpace);
        when (index < 0)
          return Array.Empty();
        flags[index] = true;
        index++;
      }

      def spans = MatchPatternSpans(flags, len);
      spans
    }

    public MatchPatternSpans(flags : array[bool], len : int) : array[NSpan]
    {
      assert(flags.Length >= len);

      def builder = List();
      mutable start = 0;
      mutable prev  = false;
      for (mutable i = 0; i < len; i++)
      {
        def flag = flags[i];
        if (flag && !prev)
          start = i;
        else when (!flag && prev)
          builder.Add(NSpan(start, i));

        prev = flag;
      }

      builder.ToArray()
    }

    static EnsureCapacity(min : int) : array[bool]
    {
      mutable flags = _flags;
	    if (flags == null || flags.Length < min)
	    {
		    mutable newCapacity = if (flags == null) 4 else (flags.Length * 2);

		    when (newCapacity > 0x7FEFFFFF)
			    newCapacity = 0x7FEFFFFF;

		    when (newCapacity < min)
			    newCapacity = min;

		    flags = array(newCapacity);
		    _flags = flags;
		    flags
	    }
	    else
	    {
	      flags = _flags;
	      Array.Clear(flags, 0, min);
	      flags
	    }
    }
  }
}
